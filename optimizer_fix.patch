diff -ruN a/patch_info/optimizer_fix.info b/patch_info/optimizer_fix.info
--- /dev/null	1970-01-01 09:00:00.000000000 +0900
+++ b/patch_info/optimizer_fix.info	2010-04-28 16:58:34.000000000 +0900
@@ -0,0 +1,8 @@
+File=optimizer_fix.patch
+Name=Unofficial optimizer fixes
+Version=1.0
+Author=Percona <info@percona.com>
+License=GPL
+Comment=
+2010-01
+Ported to 5.1.42
diff -ruN a/sql/mysql_priv.h b/sql/mysql_priv.h
--- a/sql/mysql_priv.h	2010-04-28 16:49:28.000000000 +0900
+++ b/sql/mysql_priv.h	2010-04-28 16:58:34.000000000 +0900
@@ -2093,6 +2093,7 @@
 extern ulong slave_exec_mode_options;
 extern my_bool opt_readonly, lower_case_file_system;
 extern my_bool opt_userstat_running, opt_thread_statistics;
+extern my_bool opt_optimizer_fix;
 extern my_bool opt_enable_named_pipe, opt_sync_frm, opt_allow_suspicious_udfs;
 extern my_bool opt_secure_auth;
 extern char* opt_secure_file_priv;
diff -ruN a/sql/mysqld.cc b/sql/mysqld.cc
--- a/sql/mysqld.cc	2010-04-28 16:49:28.000000000 +0900
+++ b/sql/mysqld.cc	2010-04-28 16:58:34.000000000 +0900
@@ -496,6 +496,7 @@
 #endif /* defined(ENABLED_DEBUG_SYNC) */
 my_bool opt_old_style_user_limits= 0, trust_function_creators= 0;
 my_bool opt_userstat_running= 0, opt_thread_statistics= 0;
+my_bool opt_optimizer_fix= 0;
 /*
   True if there is at least one per-hour limit for some user, so we should
   check them before each query (and possibly reset counters when hour is
@@ -5779,6 +5780,7 @@
   OPT_SLOW_QUERY_LOG_FILE,
   OPT_USERSTAT_RUNNING,
   OPT_THREAD_STATISTICS,
+  OPT_OPTIMIZER_FIX,
   OPT_USE_GLOBAL_LONG_QUERY_TIME,
   OPT_IGNORE_BUILTIN_INNODB,
   OPT_BINLOG_DIRECT_NON_TRANS_UPDATE,
@@ -7206,6 +7208,10 @@
    "Control TABLE_STATISTICS running, when userstat_running is enabled",
    (uchar**) &opt_thread_statistics, (uchar**) &opt_thread_statistics,
    0, GET_BOOL, NO_ARG, 0, 0, 1, 0, 1, 0},
+  {"optimizer_fix", OPT_OPTIMIZER_FIX,
+   "Enable unofficial optimizer fixes.",
+   (uchar**) &opt_optimizer_fix, (uchar**) &opt_optimizer_fix,
+   0, GET_BOOL, NO_ARG, 1, 0, 1, 0, 1, 0},
   {"binlog-direct-non-transactional-updates", OPT_BINLOG_DIRECT_NON_TRANS_UPDATE,
    "Causes updates to non-transactional engines using statement format to be "
    "written directly to binary log. Before using this option, make sure that "
diff -ruN a/sql/opt_range.cc b/sql/opt_range.cc
--- a/sql/opt_range.cc	2010-04-06 23:07:02.000000000 +0900
+++ b/sql/opt_range.cc	2010-04-28 16:58:34.000000000 +0900
@@ -695,7 +695,7 @@
 static TRP_RANGE *get_key_scans_params(PARAM *param, SEL_TREE *tree,
                                        bool index_read_must_be_used,
                                        bool update_tbl_stats,
-                                       double read_time);
+                                       double read_time, ha_rows *estimated_records);
 static
 TRP_ROR_INTERSECT *get_best_ror_intersect(const PARAM *param, SEL_TREE *tree,
                                           double read_time,
@@ -2199,6 +2199,7 @@
 				  ha_rows limit, bool force_quick_range)
 {
   uint idx;
+  ha_rows estimated_records=0;
   double scan_time;
   DBUG_ENTER("SQL_SELECT::test_quick_select");
   DBUG_PRINT("enter",("keys_to_use: %lu  prev_tables: %lu  const_tables: %lu",
@@ -2369,12 +2370,17 @@
 
         /* Get best 'range' plan and prepare data for making other plans */
         if ((range_trp= get_key_scans_params(&param, tree, FALSE, TRUE,
-                                             best_read_time)))
+                                             best_read_time, &estimated_records)))
         {
           best_trp= range_trp;
           best_read_time= best_trp->read_cost;
         }
 
+        if (opt_optimizer_fix && estimated_records)
+        {
+          records = estimated_records;
+        }
+
         /*
           Simultaneous key scans and row deletes on several handler
           objects are not allowed so don't use ROR-intersection for
@@ -3725,7 +3731,7 @@
   {
     DBUG_EXECUTE("info", print_sel_tree(param, *ptree, &(*ptree)->keys_map,
                                         "tree in SEL_IMERGE"););
-    if (!(*cur_child= get_key_scans_params(param, *ptree, TRUE, FALSE, read_time)))
+    if (!(*cur_child= get_key_scans_params(param, *ptree, TRUE, FALSE, read_time, NULL)))
     {
       /*
         One of index scans in this index_merge is more expensive than entire
@@ -4828,11 +4834,12 @@
 static TRP_RANGE *get_key_scans_params(PARAM *param, SEL_TREE *tree,
                                        bool index_read_must_be_used, 
                                        bool update_tbl_stats,
-                                       double read_time)
+                                       double read_time, ha_rows *estimated_records)
 {
   int idx;
   SEL_ARG **key,**end, **key_to_read= NULL;
   ha_rows UNINIT_VAR(best_records);              /* protected by key_to_read */
+  ha_rows min_records= HA_POS_ERROR;
   TRP_RANGE* read_plan= NULL;
   bool pk_is_clustered= param->table->file->primary_key_is_clustered();
   DBUG_ENTER("get_key_scans_params");
@@ -4903,6 +4910,11 @@
         key_to_read=  key;
       }
 
+      if (estimated_records && found_records
+          && min_records > found_records)
+      {
+        min_records = found_records;
+      }
     }
   }
 
@@ -4925,6 +4937,12 @@
   else
     DBUG_PRINT("info", ("No 'range' table read plan found"));
 
+  /* minimum number of records (not 0) as estimated number of records */
+  if (estimated_records && min_records != HA_POS_ERROR)
+  {
+    *estimated_records = min_records;
+  }
+
   DBUG_RETURN(read_plan);
 }
 
diff -ruN a/sql/set_var.cc b/sql/set_var.cc
--- a/sql/set_var.cc	2010-04-28 16:49:28.000000000 +0900
+++ b/sql/set_var.cc	2010-04-28 16:58:34.000000000 +0900
@@ -494,6 +494,8 @@
 						     &opt_userstat_running);
 static sys_var_bool_ptr		sys_thread_statistics(&vars, "thread_statistics",
 						      &opt_thread_statistics);
+static sys_var_bool_ptr		sys_optimizer_fix(&vars, "optimizer_fix",
+						  &opt_optimizer_fix);
 static sys_var_thd_ulong	sys_read_rnd_buff_size(&vars, "read_rnd_buffer_size",
 					       &SV::read_rnd_buff_size);
 static sys_var_thd_ulong	sys_div_precincrement(&vars, "div_precision_increment",
diff -ruN a/sql/sql_select.cc b/sql/sql_select.cc
--- a/sql/sql_select.cc	2010-04-28 16:14:10.000000000 +0900
+++ b/sql/sql_select.cc	2010-04-28 16:58:35.000000000 +0900
@@ -2561,6 +2561,11 @@
       table->reginfo.impossible_range=1;
       DBUG_RETURN(0);
     }
+    if (opt_optimizer_fix && error == 0)
+    {
+      /* quick select is not effective. but the estimated value is used. */
+      DBUG_RETURN(select->records);
+    }
     DBUG_PRINT("warning",("Couldn't use record count on const keypart"));
   }
   DBUG_RETURN(HA_POS_ERROR);			/* This shouldn't happend */
