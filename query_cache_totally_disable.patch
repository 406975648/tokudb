diff -Nur a/patch_info/remove_fcntl_excessive_calls.info b/patch_info/remove_fcntl_excessive_calls.info
--- a/patch_info/query_cache_totally_disable.info	2010-07-29 01:19:01.502765094 +0400
+++ b/patch_info/query_cache_totally_disable.info	2010-07-29 01:31:19.284017962 +0400
@@ -0,0 +1,6 @@
+File=query_cache_totally_disable.patch
+Name=Totally disable query cache
+Version=1.0
+Author=Percona
+License=GPL
+Comment=
diff -Nur a/sql/handler.cc b/sql/handler.cc
--- a/sql/handler.cc	2010-07-29 01:19:01.502765094 +0400
+++ b/sql/handler.cc	2010-07-29 01:31:19.284017962 +0400
@@ -1246,8 +1246,11 @@
     if (all)
     {
 #ifdef HAVE_QUERY_CACHE
-      if (thd->transaction.changed_tables)
-        query_cache.invalidate(thd->transaction.changed_tables);
+      if (opt_query_cache_enable)
+      {
+        if (thd->transaction.changed_tables)
+          query_cache.invalidate(thd->transaction.changed_tables);
+      }
 #endif
       thd->variables.tx_isolation=thd->session_tx_isolation;
     }
diff -Nur a/sql/log_event.cc b/sql/log_event.cc
--- a/sql/log_event.cc	2010-07-29 01:19:01.142766730 +0400
+++ b/sql/log_event.cc	2010-07-29 01:31:19.294015046 +0400
@@ -2736,21 +2736,18 @@
       pos= (const uchar*) end;                         // Break loop
     }
   }
-  
-#if !defined(MYSQL_CLIENT) && defined(HAVE_QUERY_CACHE)
-  if (!(start= data_buf = (Log_event::Byte*) my_malloc(catalog_len + 1 +
-                                              time_zone_len + 1 +
-                                              data_len + 1 +
-                                              QUERY_CACHE_FLAGS_SIZE +
-                                              db_len + 1,
-                                              MYF(MY_WME))))
-#else
-  if (!(start= data_buf = (Log_event::Byte*) my_malloc(catalog_len + 1 +
-                                             time_zone_len + 1 +
-                                             data_len + 1,
-                                             MYF(MY_WME))))
+
+  {
+    uint current_size= catalog_len + 1 + time_zone_len + 1 + data_len + 1;
+#if !defined(MYSQL_CLIENT) && defined(HAVE_QUERY_CACHE) 
+    if (opt_query_cache_enable)
+    {
+      current_size += (QUERY_CACHE_FLAGS_SIZE + db_len + 1);
+    }
 #endif
+    if (!(start= data_buf = (Log_event::Byte*) my_malloc(current_size, MYF(MY_WME))))
       DBUG_VOID_RETURN;
+  }
   if (catalog_len)                                  // If catalog is given
   {
     /**
@@ -7423,7 +7420,10 @@
       const_cast<Relay_log_info*>(rli)->m_table_map.set_table(ptr->table_id, ptr->table);
     }
 #ifdef HAVE_QUERY_CACHE
-    query_cache.invalidate_locked_for_write(rli->tables_to_lock);
+    if(opt_query_cache_enable)
+    {
+      query_cache.invalidate_locked_for_write(rli->tables_to_lock);
+    }
 #endif
   }
 
diff -Nur a/sql/log_event_old.cc b/sql/log_event_old.cc
--- a/sql/log_event_old.cc	2010-07-09 16:34:57.000000000 +0400
+++ b/sql/log_event_old.cc	2010-07-29 01:31:19.284017962 +0400
@@ -137,7 +137,10 @@
       const_cast<Relay_log_info*>(rli)->m_table_map.set_table(ptr->table_id, ptr->table);
     }
 #ifdef HAVE_QUERY_CACHE
-    query_cache.invalidate_locked_for_write(rli->tables_to_lock);
+    if (opt_query_cache_enable)
+    {
+      query_cache.invalidate_locked_for_write(rli->tables_to_lock);
+    }
 #endif
   }
 
@@ -1631,7 +1634,10 @@
       const_cast<Relay_log_info*>(rli)->m_table_map.set_table(ptr->table_id, ptr->table);
     }
 #ifdef HAVE_QUERY_CACHE
-    query_cache.invalidate_locked_for_write(rli->tables_to_lock);
+    if (opt_query_cache_enable)
+    {
+      query_cache.invalidate_locked_for_write(rli->tables_to_lock);
+    }
 #endif
   }
 
diff -Nur a/sql/mysqld.cc b/sql/mysqld.cc
--- a/sql/mysqld.cc	2010-07-29 01:19:05.552767275 +0400
+++ b/sql/mysqld.cc	2010-07-29 01:31:19.284017962 +0400
@@ -572,6 +572,7 @@
 uint tc_heuristic_recover= 0;
 uint volatile thread_count, thread_running;
 ulonglong thd_startup_options;
+my_bool opt_query_cache_enable= TRUE;
 ulong back_log, connect_timeout, concurrency, server_id;
 ulong table_cache_size, table_def_size;
 ulong what_to_log;
@@ -3846,6 +3847,13 @@
   query_cache_set_min_res_unit(query_cache_min_res_unit);
   query_cache_init();
   query_cache_resize(query_cache_size);
+#ifndef HAVE_QUERY_CACHE
+  if (opt_query_cache_enable)
+  {
+    sql_print_warning("Couldn't setup query_cache_enable=ON when query cache are disabled");
+    opt_query_cache_enable= false;
+  }
+#endif // HAVE_QUERY_CACHE
   randominit(&sql_rand,(ulong) server_start_time,(ulong) server_start_time/2);
   setup_fpu();
   init_thr_lock();
@@ -5885,6 +5893,7 @@
   OPT_SLAVE_SKIP_ERRORS, OPT_DES_KEY_FILE, OPT_LOCAL_INFILE,
   OPT_SSL_SSL, OPT_SSL_KEY, OPT_SSL_CERT, OPT_SSL_CA,
   OPT_SSL_CAPATH, OPT_SSL_CIPHER,
+  OPT_QUERY_CACHE_ENABLE,
   OPT_BACK_LOG, OPT_BINLOG_CACHE_SIZE,
   OPT_CONNECT_TIMEOUT, OPT_DELAYED_INSERT_TIMEOUT,
   OPT_DELAYED_INSERT_LIMIT, OPT_DELAYED_QUEUE_SIZE,
@@ -6903,6 +6912,15 @@
    &global_system_variables.log_warnings,
    &max_system_variables.log_warnings, 0, GET_ULONG, OPT_ARG,
    1, 0, ULONG_MAX, 0, 0, 0},
+  {"query_cache_enable", OPT_QUERY_CACHE_ENABLE,
+   "Query cache totally enable/disable on start of server",
+   (uchar*)&opt_query_cache_enable, (uchar*)&opt_query_cache_enable, 0, GET_BOOL, REQUIRED_ARG,
+   /* def_value */ TRUE,
+   /* min_value */  FALSE,
+   /* max_value */  TRUE, 
+   /* sub_size */   0,
+   /* block_size */ 1,
+   /* app_type */ 0 },
   {"back_log", OPT_BACK_LOG,
    "The number of outstanding connection requests MySQL can have. This "
    "comes into play when the main MySQL thread gets very many connection "
diff -Nur a/sql/mysql_priv.h b/sql/mysql_priv.h
--- a/sql/mysql_priv.h	2010-07-29 01:19:05.562766315 +0400
+++ b/sql/mysql_priv.h	2010-07-29 01:31:19.294015046 +0400
@@ -2035,6 +2035,7 @@
 extern ulong max_binlog_size, max_relay_log_size;
 extern ulong opt_binlog_rows_event_max_size;
 extern ulong rpl_recovery_rank, thread_cache_size, thread_pool_size;
+extern my_bool opt_query_cache_enable;
 extern ulong back_log;
 #endif /* MYSQL_SERVER */
 #if defined MYSQL_SERVER || defined INNODB_COMPATIBILITY_HOOKS
diff -Nur a/sql/set_var.cc b/sql/set_var.cc
--- a/sql/set_var.cc	2010-07-29 01:19:05.332766629 +0400
+++ b/sql/set_var.cc	2010-07-29 01:31:19.274016409 +0400
@@ -237,7 +237,8 @@
 
 static sys_var_bool_ptr	sys_automatic_sp_privileges(&vars, "automatic_sp_privileges",
 					      &sp_automatic_privileges);
-
+static sys_var_const            sys_query_cache_enable(&vars, "query_cache_enable",
+						       OPT_GLOBAL, SHOW_BOOL, (uchar*) &opt_query_cache_enable);
 static sys_var_const            sys_back_log(&vars, "back_log",
                                              OPT_GLOBAL, SHOW_LONG,
                                              (uchar*) &back_log);
@@ -1120,7 +1121,10 @@
 	  sizeof(ft_boolean_syntax)-1);
 
 #ifdef HAVE_QUERY_CACHE
-  query_cache.flush();
+  if(opt_query_cache_enable)
+  {
+    query_cache.flush();
+  }
 #endif /* HAVE_QUERY_CACHE */
 
   return 0;
@@ -1253,19 +1257,22 @@
 static void fix_query_cache_size(THD *thd, enum_var_type type)
 {
 #ifdef HAVE_QUERY_CACHE
-  ulong new_cache_size= query_cache.resize(query_cache_size);
+  if(opt_query_cache_enable)
+  {
+    ulong new_cache_size= query_cache.resize(query_cache_size);
 
-  /*
-     Note: query_cache_size is a global variable reflecting the 
-     requested cache size. See also query_cache_size_arg
-  */
+    /*
+      Note: query_cache_size is a global variable reflecting the 
+      requested cache size. See also query_cache_size_arg
+    */
 
-  if (query_cache_size != new_cache_size)
-    push_warning_printf(current_thd, MYSQL_ERROR::WARN_LEVEL_WARN,
-			ER_WARN_QC_RESIZE, ER(ER_WARN_QC_RESIZE),
-			query_cache_size, new_cache_size);
+    if (query_cache_size != new_cache_size)
+      push_warning_printf(current_thd, MYSQL_ERROR::WARN_LEVEL_WARN,
+                          ER_WARN_QC_RESIZE, ER(ER_WARN_QC_RESIZE),
+                          query_cache_size, new_cache_size);
   
-  query_cache_size= new_cache_size;
+    query_cache_size= new_cache_size;
+  }
 #endif
 }
 
diff -Nur a/sql/sql_class.cc b/sql/sql_class.cc
--- a/sql/sql_class.cc	2010-07-29 01:19:01.974016460 +0400
+++ b/sql/sql_class.cc	2010-07-29 01:31:19.294015046 +0400
@@ -719,7 +719,10 @@
 #endif
   client_capabilities= 0;                       // minimalistic client
 #ifdef HAVE_QUERY_CACHE
-  query_cache_init_query(&net);                 // If error on boot
+  if(opt_query_cache_enable)
+  {
+    query_cache_init_query(&net);                 // If error on boot
+  }
 #endif
   ull=0;
   system_thread= NON_SYSTEM_THREAD;
diff -Nur a/sql/sql_parse.cc b/sql/sql_parse.cc
--- a/sql/sql_parse.cc	2010-07-29 01:19:05.352767221 +0400
+++ b/sql/sql_parse.cc	2010-07-29 01:31:19.304017437 +0400
@@ -3647,8 +3647,11 @@
     if (!(res= simple_open_n_lock_tables(thd, all_tables)))
     {
 #ifdef HAVE_QUERY_CACHE
-      if (thd->variables.query_cache_wlock_invalidate)
-	query_cache.invalidate_locked_for_write(first_table);
+      if(opt_query_cache_enable)
+      {
+        if (thd->variables.query_cache_wlock_invalidate)
+          query_cache.invalidate_locked_for_write(first_table);
+      }
 #endif /*HAVE_QUERY_CACHE*/
       thd->locked_tables=thd->lock;
       thd->lock=0;
@@ -7084,14 +7087,17 @@
   }
 
 #ifdef HAVE_QUERY_CACHE
-  if (options & REFRESH_QUERY_CACHE_FREE)
-  {
-    query_cache.pack();				// FLUSH QUERY CACHE
-    options &= ~REFRESH_QUERY_CACHE;    // Don't flush cache, just free memory
-  }
-  if (options & (REFRESH_TABLES | REFRESH_QUERY_CACHE))
+  if(opt_query_cache_enable)
   {
-    query_cache.flush();			// RESET QUERY CACHE
+    if (options & REFRESH_QUERY_CACHE_FREE)
+    {
+      query_cache.pack();				// FLUSH QUERY CACHE
+      options &= ~REFRESH_QUERY_CACHE;    // Don't flush cache, just free memory
+    }
+    if (options & (REFRESH_TABLES | REFRESH_QUERY_CACHE))
+    {
+      query_cache.flush();			// RESET QUERY CACHE
+    }
   }
 #endif /*HAVE_QUERY_CACHE*/
   /*
diff -Nur a/sql/sql_select.cc b/sql/sql_select.cc
--- a/sql/sql_select.cc	2010-07-29 01:19:05.602766383 +0400
+++ b/sql/sql_select.cc	2010-07-29 01:31:19.274016409 +0400
@@ -9353,7 +9353,10 @@
            thd->substitute_null_with_insert_id))
       {
 #ifdef HAVE_QUERY_CACHE
-	query_cache_abort(&thd->net);
+        if(opt_query_cache_enable)
+        {
+          query_cache_abort(&thd->net);
+        }
 #endif
 	COND *new_cond;
 	if ((new_cond= new Item_func_eq(args[0],
diff -Nur a/sql/sql_yacc.yy b/sql/sql_yacc.yy
--- a/sql/sql_yacc.yy	2010-07-29 01:19:05.632766294 +0400
+++ b/sql/sql_yacc.yy	2010-07-29 01:31:19.294015046 +0400
@@ -9676,12 +9676,15 @@
           /* empty */
           {
 #ifdef HAVE_QUERY_CACHE
-            /*
-              If it is SP we do not allow insert optimisation whan result of
-              insert visible only after the table unlocking but everyone can
-              read table.
-            */
-            $$= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
+            if (opt_query_cache_enable)
+            {
+              /*
+                If it is SP we do not allow insert optimisation whan result of
+                insert visible only after the table unlocking but everyone can
+                read table.
+              */
+              $$= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
+            }
 #else
             $$= TL_WRITE_CONCURRENT_INSERT;
 #endif
@@ -10781,11 +10784,12 @@
             /*
               Ignore this option in SP to avoid problem with query cache
             */
-            if (Lex->sphead != 0)
+            if (opt_query_cache_enable && (Lex->sphead != 0))
               $$= TL_WRITE_DEFAULT;
             else
 #endif
               $$= TL_WRITE_CONCURRENT_INSERT;
+              
           }
         | LOW_PRIORITY { $$= TL_WRITE_LOW_PRIORITY; }
         ;
diff -Nur a/storage/innobase/handler/ha_innodb.cc b/storage/innobase/handler/ha_innodb.cc
--- a/storage/innobase/handler/ha_innodb.cc	2010-07-29 01:19:01.744016498 +0400
+++ b/storage/innobase/handler/ha_innodb.cc	2010-07-29 01:31:19.304017437 +0400
@@ -1479,10 +1479,13 @@
 
 	/* Argument TRUE below means we are using transactions */
 #ifdef HAVE_QUERY_CACHE
-	mysql_query_cache_invalidate4((THD*) trx->mysql_thd,
-				      (const char*) full_name,
-				      (uint32) full_name_len,
-				      TRUE);
+        if(opt_query_cache_enable)
+        {
+          mysql_query_cache_invalidate4((THD*) trx->mysql_thd,
+                                        (const char*) full_name,
+                                        (uint32) full_name_len,
+                                        TRUE);
+        }
 #endif
 }
 
diff -Nur a/storage/innodb_plugin/handler/ha_innodb.cc b/storage/innodb_plugin/handler/ha_innodb.cc
--- a/storage/innodb_plugin/handler/ha_innodb.cc	2010-07-29 01:19:05.012766370 +0400
+++ b/storage/innodb_plugin/handler/ha_innodb.cc	2010-07-29 01:31:19.304017437 +0400
@@ -1748,10 +1748,13 @@
 
 	/* Argument TRUE below means we are using transactions */
 #ifdef HAVE_QUERY_CACHE
-	mysql_query_cache_invalidate4((THD*) trx->mysql_thd,
-				      full_name,
-				      (uint32) full_name_len,
-				      TRUE);
+        if (opt_query_cache_enable)
+        {
+          mysql_query_cache_invalidate4((THD*) trx->mysql_thd,
+                                        full_name,
+                                        (uint32) full_name_len,
+                                        TRUE);
+        }
 #endif
 }
 
diff -Nur a/storage/myisam/ha_myisam.cc b/storage/myisam/ha_myisam.cc
--- a/storage/myisam/ha_myisam.cc	2010-07-29 01:19:01.754016934 +0400
+++ b/storage/myisam/ha_myisam.cc	2010-07-29 01:31:19.304017437 +0400
@@ -2225,6 +2225,8 @@
                                               *engine_callback,
                                               ulonglong *engine_data)
 {
+  if(!opt_query_cache_enable)
+    DBUG_RETURN(FALSE);
   DBUG_ENTER("ha_myisam::register_query_cache_table");
   /*
     No call back function is needed to determine if a cached statement
