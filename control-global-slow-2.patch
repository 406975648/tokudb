diff -Nur a/patch_info/control_global_slow.patch b/patch_info/control_global_slow.patch
--- a/patch_info/control_global_slow.patch	2010-06-22 16:10:31.677171791 +0400
+++ b/patch_info/control_global_slow.patch	2010-06-22 16:11:56.445999334 +0400
@@ -1,9 +1,10 @@
 File=control_global_slow.patch
 Name=Allow choose scope to use of slow-query-log's variables - global or local
-Version=1.0
+Version=2.0
 Author=Percona <info@percona.com>
 License=GPL
 Comment=http://www.percona.com/docs/wiki/patches:control_global_slow
 Changelog
-2010-06-03
-First version of patch
+2010-06-22
+Now use_global_long_query_time and use_global_log_slow_control are synonims
+Add value "all" for use_global_log_slow_control
\ В конце файла нет новой строки
--- a/sql/mysql_priv.h	2010-06-22 16:10:31.785912741 +0400
+++ b/sql/mysql_priv.h	2010-06-22 16:00:46.205925456 +0400
@@ -627,12 +627,14 @@
 #define SLOG_UG_LOG_SLOW_RATE_LIMIT         1 << 2
 #define SLOG_UG_LOG_SLOW_VERBOSITY          1 << 3
 #define SLOG_UG_LONG_QUERY_TIME             1 << 4
-#define SLOG_UG_MIN_EXAMINED_ROW_LIMIT      1 << 6
+#define SLOG_UG_MIN_EXAMINED_ROW_LIMIT      1 << 5
+#define SLOG_UG_ALL                         SLOG_UG_LOG_SLOW_FILTER | SLOG_UG_LOG_SLOW_RATE_LIMIT | SLOG_UG_LOG_SLOW_VERBOSITY | SLOG_UG_LONG_QUERY_TIME | SLOG_UG_MIN_EXAMINED_ROW_LIMIT
 /* ... */
 #define SLOG_UG_INVALID                     1 << 31
 
 static const struct msl_opts slog_use_global[]=
   {
+    /* Basic flags */
     { SLOG_UG_NONE                      , "none" },
     { SLOG_UG_LOG_SLOW_FILTER           , "log_slow_filter" },
     { SLOG_UG_LOG_SLOW_RATE_LIMIT       , "log_slow_rate_limit" },
@@ -640,7 +642,11 @@
     { SLOG_UG_LONG_QUERY_TIME           , "long_query_time" },
     { SLOG_UG_MIN_EXAMINED_ROW_LIMIT    , "min_examined_row_limit" },
     /* ... */
-    { SLOG_UG_INVALID                 , (char*)0 }
+    { 0, "" },
+    /* Complex flags */
+    { SLOG_UG_ALL                       , "all" },
+    /* ... */
+    { SLOG_UG_INVALID                   , (char*)0 }
   };
 
 #define SLOG_V_MICROTIME      1 << 0
--- a/sql/set_var.cc	2010-06-22 16:10:31.795913177 +0400
+++ b/sql/set_var.cc	2010-06-22 16:03:18.755948309 +0400
@@ -161,6 +161,71 @@
 
 static sys_var_chain vars = { NULL, NULL };
 
+void use_global_long_query_time_update(bool enable)
+{
+  ulong &log_slow_control           = global_system_variables.use_global_log_slow_control;
+  opt_use_global_long_query_time = enable;
+  if(enable)
+    log_slow_control = log_slow_control | SLOG_UG_LONG_QUERY_TIME;
+  else
+    log_slow_control = log_slow_control & (~(SLOG_UG_LONG_QUERY_TIME));
+}
+
+class sys_var_use_global_long_query_time : public sys_var_bool_ptr
+{
+public:
+  sys_var_use_global_long_query_time()
+    :sys_var_bool_ptr(&vars,"use_global_long_query_time",&opt_use_global_long_query_time)
+  {
+    chain_sys_var(&vars);
+  }
+  virtual bool update(THD *thd, set_var *var)
+  {
+    bool result = sys_var_bool_ptr::update(thd,var);
+    sync();
+    return result;
+  }
+  virtual void set_default(THD *thd, enum_var_type type)
+  {
+    sys_var_bool_ptr::set_default(thd,type);
+    sync();
+  }
+private:
+  void sync()
+  {
+    use_global_long_query_time_update(opt_use_global_long_query_time);    
+  }
+};
+class sys_var_use_global_log_slow_control : public sys_var_thd_msl_flag_correct_none
+{
+ public:
+  sys_var_use_global_log_slow_control() : sys_var_thd_msl_flag_correct_none(
+								 &vars
+								 ,"use_global_log_slow_control"
+								 ,&SV::use_global_log_slow_control
+								 ,SLOG_UG_NONE,SLOG_UG_NONE,SLOG_UG_INVALID
+								 ,slog_use_global)
+    {
+    }
+  virtual bool update(THD *thd, set_var *var)
+  {
+    bool result = sys_var_thd_msl_flag_correct_none::update(thd,var);
+    sync();
+    return result;
+  }
+  virtual void set_default(THD *thd, enum_var_type type)
+  {
+    sys_var_thd_msl_flag_correct_none::set_default(thd,type);
+    sync();
+  }
+private:
+  void sync()
+  {
+    ulong const &variable = global_system_variables.use_global_log_slow_control;
+    use_global_long_query_time_update((variable & SLOG_UG_LONG_QUERY_TIME));
+  }
+};
+
 static sys_var_thd_ulong
 sys_auto_increment_increment(&vars, "auto_increment_increment",
                              &SV::auto_increment_increment, NULL, NULL,
@@ -918,12 +983,7 @@
                                        SLOG_V_MICROTIME,
                                        SLOG_V_INVALID,
                                        slog_verb);
-static sys_var_thd_msl_flag_correct_none sys_use_global_log_slow_control(&vars, "use_global_log_slow_control",
-									 &SV::use_global_log_slow_control,
-									 SLOG_UG_NONE,
-									 SLOG_UG_NONE,
-									 SLOG_UG_INVALID,
-									 slog_use_global);
+static sys_var_use_global_log_slow_control sys_use_global_log_slow_control;
 static sys_var_bool_ptr       sys_log_slow_slave_statements(&vars, "log_slow_slave_statements",
                                                             &opt_log_slow_slave_statements);
 static sys_var_bool_ptr       sys_log_slow_sp_statements(&vars, "log_slow_sp_statements",
@@ -932,8 +992,7 @@
                                                            &opt_log_slow_timestamp_every);
 static sys_var_bool_ptr       sys_query_cache_strip_comments(&vars, "query_cache_strip_comments",
                                                        &opt_query_cache_strip_comments);
-static sys_var_bool_ptr       sys_use_global_long_query_time(&vars, "use_global_long_query_time",
-                                                       &opt_use_global_long_query_time);
+static sys_var_use_global_long_query_time sys_use_global_long_query_time;
 static sys_var_bool_ptr       sys_slow_query_log_microseconds_timestamp(&vars, "slow_query_log_microseconds_timestamp",
                                                        &opt_slow_query_log_microseconds_timestamp);
 /* Synonym of "slow_query_log" for consistency with SHOW VARIABLES output */
--- a/sql/mysqld.cc	2010-06-22 16:10:31.835910451 +0400
+++ b/sql/mysqld.cc	2010-06-22 15:52:16.075925657 +0400
@@ -6840,7 +6840,7 @@
    (uchar**) &opt_log_slow_timestamp_every, (uchar**) &opt_log_slow_timestamp_every,
    0, GET_BOOL, NO_ARG, 0, 0, 1, 0, 1, 0},
   {"use_global_log_slow_control", OPT_USE_GLOBAL_LOG_SLOW_CONTROL,
-    "Choose flags, wich always use the global variables. Multiple flags allowed in a comma-separated string. [none, log_slow_filter, log_slow_rate_limit, log_slow_verbosity, long_query_time, min_examined_row_limit]",
+    "Choose flags, wich always use the global variables. Multiple flags allowed in a comma-separated string. [none, log_slow_filter, log_slow_rate_limit, log_slow_verbosity, long_query_time, min_examined_row_limit, all]",
    0, 0, 0, GET_STR, NO_ARG, 0, 0, 0, SLOG_UG_NONE, 0, 0},
   {"query_cache_strip_comments", OPT_QUERY_CACHE_STRIP_COMMENTS,
    "Enable and disable optimisation \"strip comment for query cache\" - optimisation strip all comments from query while search query result in query cache",
--- a/sql/sql_parse.cc	2010-06-22 16:10:31.707171983 +0400
+++ b/sql/sql_parse.cc	2010-06-22 15:49:59.117227005 +0400
@@ -1706,9 +1706,6 @@
 
   ulonglong end_utime_of_query= thd->current_utime();
 
-  if (opt_use_global_long_query_time)
-    thd->variables.long_query_time = global_system_variables.long_query_time;
-
   /* use_global_log_slow_control */
   {
     system_variables const &g     = global_system_variables; // global                                                           
