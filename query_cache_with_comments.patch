unchanged:
--- a/patch_info/query_cache_with_comments.patch	1970-01-01 03:00:00.000000000 +0300
+++ b/patch_info/query_cache_with_comments.patch	2010-06-03 14:56:38.000000000 +0400
@@ -0,0 +1,9 @@
+File=query_cache_with_comments.patch
+Name=Remove comments from query (need for cache hit)
+Version=1.0
+Author=Percona <info@percona.com>
+License=GPL
+Comment=
+Changelog
+2010-06-03
+Initial version of patch
diff -u b/sql/sql_cache.cc b/sql/sql_cache.cc
--- b/sql/sql_cache.cc	2010-06-03 14:51:42.000000000 +0400
+++ b/sql/sql_cache.cc	2010-06-04 20:33:39.000000000 +0400
@@ -1345,6 +1345,209 @@
   tot_length= query_length + thd->db_length + 1 + QUERY_CACHE_FLAGS_SIZE;
 */
 
+uint remove_substring(char* where, uint length, uint start, uint stop)
+{
+  uint remove_count  = stop - start + 1; // include last symbol!
+  uint result_length = length - remove_count;
+  uint tail_length   = length - stop;
+  if(tail_length>0)
+  {
+    memcpy(where+start,where+stop+1,tail_length);
+  }
+  where[result_length] = 0;
+  return result_length;
+}
+uint remove_trailing_from_begin(char* sql,uint query_length)
+{
+  uint query_position = 0;
+  while(
+	(query_position < query_length)
+	&&
+	(
+	 (' ' == sql[query_position])
+	 ||
+	 ('\n' == sql[query_position])
+	 ||
+	 ('\r' == sql[query_position])
+	)
+       )
+  {
+    ++query_position;
+  }
+  if(query_position > 0)
+    query_length = remove_substring(sql,query_length,0,query_position-1);
+  return query_length;
+}
+uint remove_trailing_from_end(char* sql,uint query_length)
+{
+  uint query_position = query_length;
+  while(
+	(query_position > 0)
+	&&
+	(
+	 (' ' == sql[query_position-1])
+	 ||
+	 ('\n' == sql[query_position-1])
+	 ||
+	 ('\r' == sql[query_position-1])
+	)
+       )
+  {
+    --query_position;
+  }
+  if(query_position < query_length)
+    query_length = remove_substring(sql,query_length,query_position+1,query_length);
+  return query_length;
+}
+uint remove_comments_from_query(char* sql,uint query_length)
+{
+  /* simple state machine for search of comments and remove it */
+  const uchar search          = 0;
+  const uchar quote_single    = 1;
+  const uchar quote_double    = 2;
+  const uchar c_comment_1     = 3;
+  const uchar c_comment_2     = 4;
+  const uchar c_comment_3     = 5;
+  const uchar sharp_comment   = 6;
+  const uchar minus_comment_1 = 7;
+  const uchar minus_comment_2 = 8;
+  const uchar space           = 9;
+
+  for(int i = 0; i < 2; ++i)
+    {
+      // first pass - remove all comments and double spaces
+      // second pass - remove double spaces (may born after comment removing)
+      ulong query_position = 0;
+      ulong query_skip_position_start;
+      uchar state = search;
+      while(query_position < query_length)
+	{
+	  char current = sql[query_position];
+	  switch(state)
+	    {
+	    case search:
+	      {
+		switch(current)
+		  {
+		  case '\'':
+		    state = quote_single;
+		    break;
+		  case '"':
+		    state = quote_double;
+		    break;
+		  case '/':
+		    state = c_comment_1;
+		    query_skip_position_start = query_position;
+		    break;
+		  case '#':
+		    state = sharp_comment;
+		    query_skip_position_start = query_position;
+		    break;
+		  case '-':
+		    state = minus_comment_1;
+		    query_skip_position_start = query_position;
+		    break;
+		  case ' ':
+		    state = space;
+		    break;
+		  default:
+		    ;
+		  };
+		break;
+	      }
+	    case quote_single:
+	      {
+		if('\'' == current)
+		  {
+		    state = search;
+		  }
+		break;
+	      }
+	    case quote_double:
+	      {
+		if('"' == current)
+		  {
+		    state = search;
+		  }
+		break;
+	      }
+	    case c_comment_1:
+	      {
+		if('*' == current)
+		  {
+		    state = c_comment_2;
+		  }
+		else
+		  {
+		    state = search;
+		  }
+		break;
+	      }
+	    case c_comment_2:
+	      {
+		if('*' == current)
+		  {
+		    state = c_comment_3;
+		  }
+		break;
+	      }
+	    case c_comment_3:
+	      {
+		switch(current)
+		  {
+		  case '/':
+		    query_length = remove_substring(sql,query_length,query_skip_position_start,query_position);
+		    state = search;
+		    continue;
+		  case '*':
+		    state = c_comment_3;
+		    break;
+		  default:
+		    state = c_comment_2;
+		  }
+		break;
+	      }
+	    case minus_comment_1:
+	      {
+		if('-' == current)
+		  {
+		    state = minus_comment_2;
+		  }
+		else
+		  {
+		    state = search;
+		  }
+		break;
+	      }
+	    case sharp_comment:
+	    case minus_comment_2:
+	      {
+		if('\n' == current || (query_position + 1 == query_length))
+		  {
+		    query_length = remove_substring(sql,query_length,query_skip_position_start,query_position);
+		    state = search;
+		    continue;	    
+		  }
+		break;
+	      }
+	    case space:
+	      {
+		if(' ' == current)
+		  {
+		    query_length = remove_substring(sql,query_length,query_position,query_position);
+		  }
+		state = search;
+		continue;
+	      }
+
+	    };
+	  ++query_position;
+	}
+    }
+  query_length = remove_trailing_from_begin(sql,query_length);
+  query_length = remove_trailing_from_end(sql,query_length);
+  return query_length;
+}
 int
 Query_cache::send_result_to_client(THD *thd, char *sql, uint query_length)
 {
@@ -1408,6 +1611,10 @@
       DBUG_PRINT("qcache", ("The statement has a SQL_NO_CACHE directive"));
       goto err;
     }
+    if(opt_query_cache_strip_comments)
+    {
+      query_length = remove_comments_from_query(sql,query_length);
+    }
   }
 
   /*
only in patch2:
unchanged:
--- a/sql/mysqld.cc	2010-06-04 20:20:43.000000000 +0400
+++ b/sql/mysqld.cc	2010-06-04 20:30:02.000000000 +0400
@@ -486,6 +486,7 @@
 my_bool opt_log_slow_slave_statements= 0;
 my_bool opt_log_slow_sp_statements= 0;
 my_bool opt_log_slow_timestamp_every= 0;
+my_bool opt_query_cache_strip_comments;
 my_bool opt_use_global_long_query_time= 0;
 my_bool opt_slow_query_log_microseconds_timestamp= 0;
 my_bool lower_case_file_system= 0;
@@ -5785,6 +5786,7 @@
   OPT_THREAD_STATISTICS,
   OPT_OPTIMIZER_FIX,
   OPT_SUPPRESS_LOG_WARNING_1592,
+  OPT_QUERY_CACHE_STRIP_COMMENTS,
   OPT_USE_GLOBAL_LONG_QUERY_TIME,
   OPT_USE_GLOBAL_LOG_SLOW_CONTROL,
   OPT_SLOW_QUERY_LOG_MICROSECONDS_TIMESTAMP,
@@ -6796,6 +6798,10 @@
   {"use_global_log_slow_control", OPT_USE_GLOBAL_LOG_SLOW_CONTROL,
     "Choose flags, wich always use the global variables. Multiple flags allowed in a comma-separated string. [none, log_slow_filter, log_slow_rate_limit, log_slow_verbosity, long_query_time, min_examined_row_limit]",
    0, 0, 0, GET_STR, NO_ARG, 0, 0, 0, SLOG_UG_NONE, 0, 0},
+  {"query_cache_strip_comments", OPT_QUERY_CACHE_STRIP_COMMENTS,
+   "Enable and disable optimisation \"strip comment for query cache\" - optimisation strip all comments from query while search query result in query cache",
+   (uchar**) &opt_query_cache_strip_comments, (uchar**) &opt_query_cache_strip_comments,
+   0, GET_BOOL, NO_ARG, 0, 0, 1, 0, 1, 0},
   {"use_global_long_query_time", OPT_USE_GLOBAL_LONG_QUERY_TIME,
    "Control always use global long_query_time or local long_query_time.",
    (uchar**) &opt_use_global_long_query_time, (uchar**) &opt_use_global_long_query_time,
only in patch2:
unchanged:
--- a/sql/mysql_priv.h	2010-06-04 20:20:43.000000000 +0400
+++ b/sql/mysql_priv.h	2010-06-04 20:27:31.000000000 +0400
@@ -2123,6 +2123,7 @@
 extern my_bool opt_log_slow_admin_statements, opt_log_slow_slave_statements;
 extern my_bool opt_log_slow_sp_statements;
 extern my_bool opt_log_slow_timestamp_every;
+extern my_bool opt_query_cache_strip_comments;
 extern my_bool opt_use_global_long_query_time;
 extern my_bool opt_slow_query_log_microseconds_timestamp;
 extern my_bool sp_automatic_privileges, opt_noacl;
only in patch2:
unchanged:
--- a/sql/set_var.cc	2010-06-04 20:20:43.000000000 +0400
+++ b/sql/set_var.cc	2010-06-04 20:37:40.000000000 +0400
@@ -930,6 +930,8 @@
                                                          &opt_log_slow_sp_statements);
 static sys_var_bool_ptr       sys_log_slow_timestamp_every(&vars, "log_slow_timestamp_every",
                                                            &opt_log_slow_timestamp_every);
+static sys_var_bool_ptr       sys_query_cache_strip_comments(&vars, "query_cache_strip_comments",
+                                                       &opt_query_cache_strip_comments);
 static sys_var_bool_ptr       sys_use_global_long_query_time(&vars, "use_global_long_query_time",
                                                        &opt_use_global_long_query_time);
 static sys_var_bool_ptr       sys_slow_query_log_microseconds_timestamp(&vars, "slow_query_log_microseconds_timestamp",
