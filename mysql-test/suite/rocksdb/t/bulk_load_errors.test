--source include/have_rocksdb.inc
--source include/not_crashrep.inc

--let SEARCH_FILE=$MYSQLTEST_VARDIR/tmp/rocksdb.bulk_load_errors.err
--let $restart_parameters=restart:--log-error=$SEARCH_FILE
--replace_result $SEARCH_FILE LOG_FILE
--source include/restart_mysqld.inc

### Bulk load ###
CREATE TABLE t1(pk INT, PRIMARY KEY(pk)) ENGINE=RocksDB;

# Make sure we get an error with out of order keys during bulk load
SET rocksdb_bulk_load=1;
INSERT INTO t1 VALUES(10);
INSERT INTO t1 VALUES(11);
--error ER_KEYS_OUT_OF_ORDER
INSERT INTO t1 VALUES(9);
SET rocksdb_bulk_load=0;

# Make sure only 10 and 11 got into the table
SELECT * FROM t1;

# Make sure we get an error with overlapping data
SET rocksdb_bulk_load=1;
INSERT INTO t1 VALUES(1);
INSERT INTO t1 VALUES(2);
INSERT INTO t1 VALUES(20);
INSERT INTO t1 VALUES(21);

# This last crashes the server (intentionally) because we can't return any
# error information from a SET <variable>=<value>
--source include/expect_crash.inc
--error 2013 # CR_SERVER_LOST
SET rocksdb_bulk_load=0;

# Make sure the error exists in the .err log and then restart the server
--let SEARCH_PATTERN=RocksDB: Error 207 finalizing last SST file while setting bulk loading variable
--source include/search_pattern_in_file.inc

--let $restart_parameters=
--source include/start_mysqld.inc

--remove_file $SEARCH_FILE


TRUNCATE TABLE t1;

### Bulk load with unsorted PKs ###
SET rocksdb_bulk_load_allow_unsorted=1;

# We should not get an error with out of order PKs
SET rocksdb_bulk_load=1;
INSERT INTO t1 VALUES(100);
INSERT INTO t1 VALUES(101);
INSERT INTO t1 VALUES(99);
SET rocksdb_bulk_load=0;
SELECT * FROM t1;
TRUNCATE TABLE t1;

# We should get an error with duplicate PKs in the same bulk load
SET rocksdb_bulk_load=1;
INSERT INTO t1 VALUES(201);
INSERT INTO t1 VALUES(200);
INSERT INTO t1 VALUES(202);
--error ER_DUP_ENTRY
INSERT INTO t1 VALUES(201);
SET rocksdb_bulk_load=0;
SELECT * FROM t1;

DROP TABLE t1;
