# name       : query_cache_enhance.patch
# introduced : 11 or before
# maintainer : Oleg
#
#!!! notice !!!
# Any small change to this file in the main branch
# should be done or reviewed by the maintainer!
--- /dev/null
+++ b/patch_info/query_cache_enhance.patch
@@ -0,0 +1,15 @@
+File=query_cache_enhance.patch
+Name= query cache Percona's cumulative patch
+Version=1.0
+Author=Percona <info@percona.com>
+License=GPL
+Comment= 1) Add new status - Waiting on query cache mutex (status_wait_query_cache_mutex.patch)
+         2) Remove comments from query (need for cache hit) (query_cache_with_comments.patch)
+         3) Totally disable query cache (query_cache_totally_disable.info)
+2010-05 - First version avaliable (query_cache_with_comments.patch)
+2010-07 - First version avaliable (status_wait_query_cache_mutex.patch
+2010-07 - First version avaliable (query_cache_totally_disable.info)
+2010-07 - Fix crash (query_cache_with_comments.patch)
+2010-07 - Fix incorrect behavior diff (query_cache_with_comments.patch)
+2010-09 - Merge patches to one
+2010-11 - Ported to 5.5
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -904,6 +904,7 @@
 #endif
 #ifdef HAVE_QUERY_CACHE
 ulong query_cache_min_res_unit= QUERY_CACHE_MIN_RESULT_DATA_SIZE;
+my_bool opt_query_cache_strip_comments= FALSE;
 Query_cache query_cache;
 #endif
 #ifdef HAVE_SMEM
--- a/sql/mysqld.h
+++ b/sql/mysqld.h
@@ -91,6 +91,7 @@
 extern my_bool opt_log, opt_slow_log;
 extern my_bool opt_backup_history_log;
 extern my_bool opt_backup_progress_log;
+extern my_bool opt_query_cache_strip_comments;
 extern ulonglong log_output_options;
 extern ulong log_backup_output_options;
 extern my_bool opt_log_queries_not_using_indexes;
--- a/sql/sql_cache.cc
+++ b/sql/sql_cache.cc
@@ -344,6 +344,469 @@
 #include "probes_mysql.h"
 #include "transaction.h"
 
+namespace query_comments_parser
+{
+
+const char* find(const char  *where,
+                        const char  *what,
+                        const size_t what_length)
+{
+  DBUG_ASSERT(where != NULL);
+  DBUG_ASSERT(what  != NULL);
+  DBUG_ASSERT(what_length > 0);
+  DBUG_ASSERT(what_length == 1 || strlen(what) == what_length);
+  const char* result= where;
+  while(true)
+  {
+    /* try to find */
+    if (what_length == 1)
+    {
+      result= index(result, *what);
+    }
+    else
+    {
+      result= strstr(result, what);
+    }
+    if (NULL == result)
+    {
+      /* not found */
+      return NULL;
+    }
+    /* check for back-slash */
+    else if (result > where && '\\' == *(result - 1))
+    {
+      /* skip symbol with backslash */
+      result++;
+      if (*result == 0)
+      {
+        /* not found */
+        return NULL;
+      }
+      else
+      {
+        /* repeat search */
+        continue;
+      }
+    }
+    else
+    {
+      return result;
+    }
+  }
+}
+inline const char* find(const char *where,
+                        const char *what)
+{
+  DBUG_ASSERT(what != NULL);
+  return find(where, what, strlen(what));
+}
+inline const char* find(const char *where,
+                        const char symbol)
+{
+  return find(where, &symbol, 1);
+}
+enum Kind
+{
+  /*
+    'Empty' symbol - epsilon in classic parsers
+  */
+  Empty= 0x0,
+  /*
+    Following symbols and constructions can be before SELECT statement
+    * whitespaces: ' ' \t \r \n
+    * bracets: ( )
+    * C-style and single-line comments
+    */
+  Special= 0x1,
+  /*
+    1) C-style comment (slash-star comment-body star-slash)
+    2) signle-line comment:
+    * sharp comment (sharp comment-body new-line)
+    * minus-minus comment (minus-minus comment-body new-line)
+    */
+  Comment= (Special | 0x2),
+  /*
+    Not a special symbols
+  */
+  Another= 0x4,
+  /*
+    Whitespaces: ' ' \t \r \n
+  */
+  WhiteSpace= (Special | 0x8),
+  /*
+    Error: not-closed quotes, not-closed C-style comment, end-of-query
+  */
+  Error= 0xF
+};
+
+Kind analyze(const char * const begin,
+             const char * const end,
+             const char **to_pointer)
+{
+  DBUG_ASSERT(begin <= end);
+  DBUG_ASSERT(end == index(begin, 0));
+  DBUG_ASSERT(to_pointer);
+  const char* &to= *to_pointer= begin;
+  /* if empty */
+  if (*to == 0)
+  {
+    return Empty;
+  }
+  const char current= *to;
+  switch(current)
+  {
+  case '\'':
+  case '"':
+    /* skip quote */
+    to++;
+    /* search pair */
+    to= find(to, current);
+    if (NULL == to)
+    {
+      /* not found - not closed quote */
+      return Error;
+    }
+    else
+    {
+      /* found */
+      DBUG_ASSERT(to < end);
+      DBUG_ASSERT(*to == current);
+      /* skip second quote */
+      to++;
+      return Another;
+    }
+  case '-':
+    /* Skip minus */
+    to++;
+    /* Check for second minus */
+    if (*to != '-')
+    {
+      /* Just minus, go to extract special */
+      return Special;
+    }
+    else
+    {
+      /*
+        Prefix is  minus-minus, next case-branch is processing
+        single line comments.
+      */
+    }
+  case '#':
+    /*
+      This is single-line comment, it started by "#" or "--".
+      Skip first symbol.
+    */
+    to++;
+    /* search new-line */
+    to= find(to, '\n');
+    if (NULL == to)
+    {
+      /* not found, end of the comment is the end of the query */
+      to= end;
+    }
+    else
+    {
+      /* found */
+      DBUG_ASSERT(to < end);
+      DBUG_ASSERT(*to == '\n');
+      /* skip end-of-line */
+      to++;
+    }
+    return Comment;
+  case '/':
+    {
+      /* skip slash */
+      to++;
+      /* check for star */
+      if (*to == '*')
+      {
+        /* skip star */
+        to++;
+        /* check for exclamation */
+        bool exclamation= (*to == '!');
+        /* search star-slash */
+        to= find(to, "*/");
+        if (NULL == to)
+        {
+          /* not found - not closed comment */
+          return Error;
+        }
+        else
+        {
+          /* found */
+          DBUG_ASSERT(to + 1 < end);
+          DBUG_ASSERT(0 == strncmp(to, "*/", 2));
+          /* skip star-slash */
+          to++;
+          to++;
+          return (exclamation ? Special : Comment);
+        }
+      }
+      else
+      {
+        /* just slash */
+        return Another;
+      }
+    }
+  case ' ':
+  case '\t':
+  case '\r':
+  case '\n':
+    {
+      /* skip space */
+      to++;
+      return WhiteSpace;
+    }
+  case '\\':
+    {
+      /* skip backslash */
+      to++;
+      if (*to == 0)
+      {
+        /*
+          query complete by backslash
+          probable error?
+        */
+        return Another;
+      }
+      else
+      {
+        /* skip after backslash symbol */
+        to++;
+        return Another;
+      }
+    }
+  case '(':
+  case ')':
+    {
+      /* skip bracet */
+      to++;
+      return Special;
+    }
+  default:
+    {
+      /* skip symbol */
+      to++;
+      return Another;
+    }
+  };
+}
+
+bool remove_comments_from_query(const char * const query,
+                                const size_t       q_length,
+                                char       * const result,
+                                size_t            *r_length)
+{
+  /* end of query */
+  const char * const end= query + q_length;
+  /* pointers to begin and end of parsed block */
+  const char *from=  query;
+  const char *to= from;
+  /* pointer to last space */
+  const char *space= NULL;
+  /* current position in result buffer */
+  char* current= result;
+  while(true)
+  {
+    from= to;
+    switch(analyze(from, end, &to))
+    {
+    case Empty:
+      {
+        /*
+          parse completed
+          check for whitespace in the end
+        */
+        if (current == space)
+        {
+          /* drop whitespace in the of query */
+          --current;
+        }
+        /* result is null-terminating string */
+        *current= 0;
+        /* set result length */
+        *r_length= current - result;
+        /* all right */
+        return true;
+      }
+    case Special:
+    case Another:
+      {
+        /* calculate parsed block size */
+        size_t block_size= to - from;
+        /* copy parsed block to result */
+        memcpy(current, from, block_size);
+        /* switch result after copied block */
+        current+= block_size;
+        /* switch after parsed block */
+        from= to;
+        /* parse again */
+        continue;
+      }
+    case Comment:
+      /* should just insert space instead of comment */
+    case WhiteSpace:
+      if (space == current || from == query)
+      {
+        /* previous symbol was space */
+      }
+      else
+      {
+        /* insert space to result buffer */
+        *current= ' ';
+        /* switch after inserted space */
+        current++;
+      }
+      /* remember last-after-space position */
+      space= current;
+      /* parse again */
+      continue;
+    case Error:
+    default:
+      {
+        /* bad source query */
+        return false;
+      }
+    }
+  }
+}
+
+size_t skip_not_another(const char * const query, const size_t query_length)
+{
+  const char * const end= query + query_length;
+  const char *from= query;
+  const char *to;
+  while(true)
+  {
+    switch(analyze(from, end, &to))
+    {
+    case Error:
+      return 0;
+    case Empty:
+    case Another:
+      return (from - query);
+    default:
+      from= to;
+      continue;
+    };
+  }
+}
+
+size_t skip_default(const char * const query, const size_t /* query_length */)
+{
+  size_t query_position= 0;
+  /*
+    Skip '(' characters in queries like following:
+    (select a from t1) union (select a from t1);
+  */
+  while (query[query_position]=='(')
+    query_position++;
+  return query_position;
+}
+
+} /* namespace query_comments_parser */
+
+
+class Comments_Processor
+{
+private:
+  Comments_Processor(const Comments_Processor&);
+  Comments_Processor& operator=(const Comments_Processor&);
+public:
+  Comments_Processor(THD *thd) :
+    backup_query          (thd->query()),
+    backup_query_length   (thd->query_length()),
+    db_length             (thd->db_length),
+    query                 (&(thd_query_string(thd)->str)),
+    query_length          (&(thd_query_string(thd)->length)),
+    query_without_comments(&(thd->query_without_comments)),
+    enabled               (opt_query_cache_strip_comments),
+    restore               (false)
+  {
+  }
+  Comments_Processor(Query_Without_Comments  *current_query_without_comments,
+                     char                   **original_query,
+                     size_t                  *original_query_length,
+                     size_t                   current_db_length) :
+    backup_query          (*original_query),
+    backup_query_length   (*original_query_length),
+    db_length             (current_db_length),
+    query                 (original_query),
+    query_length          (original_query_length),
+    query_without_comments(current_query_without_comments),
+    enabled               (opt_query_cache_strip_comments),
+    restore               (false)
+  {
+  }
+  ~Comments_Processor()
+  {
+    restore_comments();
+  }
+  size_t prefix_length()
+  {
+    using query_comments_parser::skip_not_another;
+    using query_comments_parser::skip_default;
+    if (enabled)
+    {
+      return skip_not_another(backup_query, backup_query_length);
+    }
+    else
+    {
+      return skip_default(backup_query, backup_query_length);
+    }
+  }
+  bool remove_comments()
+  {
+    using query_comments_parser::remove_comments_from_query;
+    if (!enabled || restore)
+    {
+      return true;
+    }
+    /* Allocate memory for query rewrite */
+    if (!query_without_comments->allocate(backup_query_length, db_length))
+    {
+      return false;
+    }
+    size_t result_length;
+    if (!(restore= remove_comments_from_query(backup_query,
+                                              backup_query_length,
+                                              query_without_comments->query(),
+                                              &result_length)))
+    {
+      return false;
+    }
+    query_without_comments->set_length(result_length);
+    *query=        query_without_comments->query();
+    *query_length= query_without_comments->length();
+    return restore;
+  }
+  void restore_comments()
+  {
+    if (enabled && restore)
+    {
+      /* Replace striped by original from backup */
+      *query=        backup_query;
+      *query_length= backup_query_length;
+
+      /* Clean query_without_comments */
+      query_without_comments->set_length(0);
+
+      /* Mark restore */
+      restore= false;
+    }
+  }
+private:
+  char         * const backup_query;
+  const size_t         backup_query_length;
+  const size_t         db_length;
+private:
+  char                  **query;
+  size_t                 *query_length;
+  Query_Without_Comments *query_without_comments;
+  bool                    enabled;
+  bool                    restore;
+};
+
 #ifdef EMBEDDED_LIBRARY
 #include "emb_qcache.h"
 #endif
@@ -454,7 +917,14 @@
   Query_cache_wait_state wait_state(thd, __func__, __FILE__, __LINE__);
   DBUG_ENTER("Query_cache::try_lock");
 
+  const char* old_proc_info= thd->proc_info;
+  thd_proc_info(thd,"Waiting on query cache mutex");
   mysql_mutex_lock(&structure_guard_mutex);
+  DEBUG_SYNC(thd, "status_waiting_on_query_cache_mutex");
+  DBUG_EXECUTE_IF("status_waiting_on_query_cache_mutex_sleep", {
+      sleep(1);
+    });
+  thd->proc_info = old_proc_info;
   while (1)
   {
     if (m_cache_lock_status == Query_cache::UNLOCKED)
@@ -1274,6 +1744,8 @@
       unlock();
       DBUG_VOID_RETURN;
     }
+    Comments_Processor comments_processor(thd);
+    comments_processor.remove_comments();
 
     /* Key is query + database + flag */
     if (thd->db_length)
@@ -1440,7 +1912,7 @@
 */
 
 int
-Query_cache::send_result_to_client(THD *thd, char *sql, uint query_length)
+Query_cache::send_result_to_client(THD *thd, char *sql, uint query_length_uint)
 {
   ulonglong engine_data;
   Query_cache_query *query;
@@ -1452,6 +1924,11 @@
   ulong tot_length;
   Query_cache_query_flags flags;
   DBUG_ENTER("Query_cache::send_result_to_client");
+  size_t query_length= query_length_uint;
+  Comments_Processor comments_processor(&(thd->query_without_comments),
+                                        &sql,
+                                        &query_length,
+                                        thd->db_length);
 
   /*
     Testing 'query_cache_size' without a lock here is safe: the thing
@@ -1471,13 +1948,7 @@
   }
 
   {
-    uint i= 0;
-    /*
-      Skip '(' characters in queries like following:
-      (select a from t1) union (select a from t1);
-    */
-    while (sql[i]=='(')
-      i++;
+    size_t i= comments_processor.prefix_length();
 
     /*
       Test if the query is a SELECT
@@ -1487,10 +1958,11 @@
       frequently appeared in real life, consequently we can
       check all such queries, too.
     */
-    if ((my_toupper(system_charset_info, sql[i])     != 'S' ||
-         my_toupper(system_charset_info, sql[i + 1]) != 'E' ||
-         my_toupper(system_charset_info, sql[i + 2]) != 'L') &&
-        sql[i] != '/')
+    if (!((i + 2 < query_length) &&
+          ((my_toupper(system_charset_info, sql[i])     == 'S' &&
+            my_toupper(system_charset_info, sql[i + 1]) == 'E' &&
+            my_toupper(system_charset_info, sql[i + 2]) == 'L') ||
+           sql[i] == '/')))
     {
       DBUG_PRINT("qcache", ("The statement is not a SELECT; Not cached"));
       goto err;
@@ -1521,6 +1993,7 @@
     goto err_unlock;
 
   Query_cache_block *query_block;
+  comments_processor.remove_comments();
 
   tot_length= query_length + thd->db_length + 1 + QUERY_CACHE_FLAGS_SIZE;
   if (thd->db_length)
@@ -1587,6 +2060,7 @@
 	 (uchar*) &flags, QUERY_CACHE_FLAGS_SIZE);
   query_block = (Query_cache_block *)  my_hash_search(&queries, (uchar*) sql,
                                                       tot_length);
+  comments_processor.restore_comments();
   /* Quick abort on unlocked data */
   if (query_block == 0 ||
       query_block->query()->result() == 0 ||
--- a/sql/sys_vars.cc
+++ b/sql/sys_vars.cc
@@ -1809,6 +1809,11 @@
        NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),
        ON_UPDATE(fix_query_cache_size));
 
+static Sys_var_mybool Sys_query_cache_strip_comments(
+       "query_cache_strip_comments", "Enable and disable optimisation \"strip comment for query cache\" - optimisation strip all comments from query while search query result in query cache",
+       GLOBAL_VAR(opt_query_cache_strip_comments), CMD_LINE(OPT_ARG),
+       DEFAULT(FALSE));
+
 static Sys_var_ulong Sys_query_cache_limit(
        "query_cache_limit",
        "Don't cache results that are bigger than this",
--- /dev/null
+++ b/mysql-test/include/percona_query_cache_with_comments.inc
@@ -0,0 +1,100 @@
+--source include/percona_query_cache_with_comments_clear.inc
+let $query=/* with comment first */select * from t1;
+eval $query;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=# with comment first
+select * from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=-- with comment first
+select * from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=/* with comment first and "quote" */select * from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=# with comment first and "quote"
+select * from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=-- with comment first and "quote" 
+select * from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=
+    /* with comment and whitespaces first */select * from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query= 
+    # with comment and whitespaces first
+select * from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=
+    -- with comment and whitespaces first
+select * from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $internal=* internal comment *;
+
+let $query=select * /$internal/ from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+let $query=select */$internal/ from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+let $query=select */$internal/from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $internal=* internal comment with "quote" *;
+
+let $query=select * /$internal/ from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+let $query=select */$internal/ from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+let $query=select */$internal/from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=select * from t1
+;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=select * from t1 ;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=select * from t1	;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=select * from t1
+/* comment in the end */;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=select * from t1
+/* *\/ */;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=select * from t1
+/* comment in the end */
+;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=select * from t1 #comment in the end;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=select * from t1 #comment in the end
+;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=select * from t1 -- comment in the end;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=select * from t1 -- comment in the end
+;
+--source include/percona_query_cache_with_comments_eval.inc
+
+# following two quries related to bug #856404.
+# This is different queries, but opt_query_cache_strip_comments is thinking what are equal.
+let $query=select ' \'  ' from t1;
+--source include/percona_query_cache_with_comments_eval.inc
+
+let $query=select ' \' /* comment inside quotes with internal backslash quote */' from t1;
+--source include/percona_query_cache_with_comments_eval.inc
--- /dev/null
+++ b/mysql-test/include/percona_query_cache_with_comments_begin.inc
@@ -0,0 +1,12 @@
+-- source include/have_query_cache.inc
+
+set GLOBAL query_cache_size=1355776;
+
+--disable_warnings
+drop table if exists t1;
+--enable_warnings
+
+create table t1 (a int not null);
+insert into t1 values (1),(2),(3);
+
+--source include/percona_query_cache_with_comments_clear.inc
--- /dev/null
+++ b/mysql-test/include/percona_query_cache_with_comments_clear.inc
@@ -0,0 +1,5 @@
+# Reset query cache variables.
+flush query cache; # This crashed in some versions
+flush query cache; # This crashed in some versions
+reset query cache;
+flush status;
--- /dev/null
+++ b/mysql-test/include/percona_query_cache_with_comments_end.inc
@@ -0,0 +1,3 @@
+DROP TABLE t1;
+SET GLOBAL query_cache_size=default;
+set global query_cache_strip_comments=OFF;
--- /dev/null
+++ b/mysql-test/include/percona_query_cache_with_comments_eval.inc
@@ -0,0 +1,7 @@
+echo -----------------------------------------------------;
+echo $query;
+echo -----------------------------------------------------;
+--source include/percona_query_cache_with_comments_show.inc
+eval $query;
+eval $query;
+--source include/percona_query_cache_with_comments_show.inc
--- /dev/null
+++ b/mysql-test/include/percona_query_cache_with_comments_show.inc
@@ -0,0 +1,8 @@
+let $show=show status like "Qcache_queries_in_cache";
+eval $show;
+let $show=show status like "Qcache_inserts";
+eval $show;
+let $show=show status like "Qcache_hits";
+eval $show;
+
+
--- /dev/null
+++ b/mysql-test/r/percona_query_cache_with_comments.result
@@ -0,0 +1,897 @@
+set global query_cache_strip_comments=ON;
+set GLOBAL query_cache_size=1355776;
+drop table if exists t1;
+create table t1 (a int not null);
+insert into t1 values (1),(2),(3);
+flush query cache;
+flush query cache;
+reset query cache;
+flush status;
+flush query cache;
+flush query cache;
+reset query cache;
+flush status;
+/* with comment first */select * from t1;
+a
+1
+2
+3
+-----------------------------------------------------
+/* with comment first */select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	0
+/* with comment first */select * from t1;
+a
+1
+2
+3
+/* with comment first */select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	2
+-----------------------------------------------------
+# with comment first
+select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	2
+# with comment first
+select * from t1;
+a
+1
+2
+3
+# with comment first
+select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	4
+-----------------------------------------------------
+-- with comment first
+select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	4
+-- with comment first
+select * from t1;
+a
+1
+2
+3
+-- with comment first
+select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	6
+-----------------------------------------------------
+/* with comment first and "quote" */select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	6
+/* with comment first and "quote" */select * from t1;
+a
+1
+2
+3
+/* with comment first and "quote" */select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	8
+-----------------------------------------------------
+# with comment first and "quote"
+select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	8
+# with comment first and "quote"
+select * from t1;
+a
+1
+2
+3
+# with comment first and "quote"
+select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	10
+-----------------------------------------------------
+-- with comment first and "quote" 
+select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	10
+-- with comment first and "quote" 
+select * from t1;
+a
+1
+2
+3
+-- with comment first and "quote" 
+select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	12
+-----------------------------------------------------
+/* with comment and whitespaces first */select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	12
+/* with comment and whitespaces first */select * from t1;
+a
+1
+2
+3
+/* with comment and whitespaces first */select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	14
+-----------------------------------------------------
+# with comment and whitespaces first
+select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	14
+# with comment and whitespaces first
+select * from t1;
+a
+1
+2
+3
+# with comment and whitespaces first
+select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	16
+-----------------------------------------------------
+-- with comment and whitespaces first
+select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	16
+-- with comment and whitespaces first
+select * from t1;
+a
+1
+2
+3
+-- with comment and whitespaces first
+select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	18
+-----------------------------------------------------
+select * /* internal comment */ from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	18
+select * /* internal comment */ from t1;
+a
+1
+2
+3
+select * /* internal comment */ from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	20
+-----------------------------------------------------
+select */* internal comment */ from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	20
+select */* internal comment */ from t1;
+a
+1
+2
+3
+select */* internal comment */ from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	22
+-----------------------------------------------------
+select */* internal comment */from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	22
+select */* internal comment */from t1;
+a
+1
+2
+3
+select */* internal comment */from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	24
+-----------------------------------------------------
+select * /* internal comment with "quote" */ from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	24
+select * /* internal comment with "quote" */ from t1;
+a
+1
+2
+3
+select * /* internal comment with "quote" */ from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	26
+-----------------------------------------------------
+select */* internal comment with "quote" */ from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	26
+select */* internal comment with "quote" */ from t1;
+a
+1
+2
+3
+select */* internal comment with "quote" */ from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	28
+-----------------------------------------------------
+select */* internal comment with "quote" */from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	28
+select */* internal comment with "quote" */from t1;
+a
+1
+2
+3
+select */* internal comment with "quote" */from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	30
+-----------------------------------------------------
+select * from t1
+
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	30
+select * from t1
+;
+a
+1
+2
+3
+select * from t1
+;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	32
+-----------------------------------------------------
+select * from t1 
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	32
+select * from t1 ;
+a
+1
+2
+3
+select * from t1 ;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	34
+-----------------------------------------------------
+select * from t1	
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	34
+select * from t1	;
+a
+1
+2
+3
+select * from t1	;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	36
+-----------------------------------------------------
+select * from t1
+/* comment in the end */
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	36
+select * from t1
+/* comment in the end */;
+a
+1
+2
+3
+select * from t1
+/* comment in the end */;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	38
+-----------------------------------------------------
+select * from t1
+/* *\/ */
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	38
+select * from t1
+/* *\/ */;
+a
+1
+2
+3
+select * from t1
+/* *\/ */;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	40
+-----------------------------------------------------
+select * from t1
+/* comment in the end */
+
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	40
+select * from t1
+/* comment in the end */
+;
+a
+1
+2
+3
+select * from t1
+/* comment in the end */
+;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	42
+-----------------------------------------------------
+select * from t1 #comment in the end
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	42
+select * from t1 #comment in the end;
+a
+1
+2
+3
+select * from t1 #comment in the end;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	44
+-----------------------------------------------------
+select * from t1 #comment in the end
+
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	44
+select * from t1 #comment in the end
+;
+a
+1
+2
+3
+select * from t1 #comment in the end
+;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	46
+-----------------------------------------------------
+select * from t1 -- comment in the end
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	46
+select * from t1 -- comment in the end;
+a
+1
+2
+3
+select * from t1 -- comment in the end;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	48
+-----------------------------------------------------
+select * from t1 -- comment in the end
+
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	48
+select * from t1 -- comment in the end
+;
+a
+1
+2
+3
+select * from t1 -- comment in the end
+;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	50
+-----------------------------------------------------
+select ' \'  ' from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	50
+select ' \'  ' from t1;
+'  
+ '  
+ '  
+ '  
+select ' \'  ' from t1;
+'  
+ '  
+ '  
+ '  
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	2
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	2
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	51
+-----------------------------------------------------
+select ' \' /* comment inside quotes with internal backslash quote */' from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	2
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	2
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	51
+select ' \' /* comment inside quotes with internal backslash quote */' from t1;
+' /* comment inside quotes with internal backslash quote */
+ ' /* comment inside quotes with internal backslash quote */
+ ' /* comment inside quotes with internal backslash quote */
+ ' /* comment inside quotes with internal backslash quote */
+select ' \' /* comment inside quotes with internal backslash quote */' from t1;
+' /* comment inside quotes with internal backslash quote */
+ ' /* comment inside quotes with internal backslash quote */
+ ' /* comment inside quotes with internal backslash quote */
+ ' /* comment inside quotes with internal backslash quote */
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	3
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	3
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	52
+DROP TABLE t1;
+SET GLOBAL query_cache_size=default;
+set global query_cache_strip_comments=OFF;
--- /dev/null
+++ b/mysql-test/r/percona_query_cache_with_comments_crash.result
@@ -0,0 +1,21 @@
+set GLOBAL query_cache_size=1355776;
+drop table if exists t1;
+create table t1 (a int not null);
+insert into t1 values (1),(2),(3);
+flush query cache;
+flush query cache;
+reset query cache;
+flush status;
+( select * from t1 );
+a
+1
+2
+3
+/*!40101 SET @OLD_SQL_MODE := @@SQL_MODE, @@SQL_MODE := REPLACE(REPLACE(@@SQL_MODE, 'ANSI_QUOTES', ''), ',,', ','), @OLD_QUOTE := @@SQL_QUOTE_SHOW_CREATE, @@SQL_QUOTE_SHOW_CREATE := 1 */;
+/* only comment */;
+# only comment
+;
+-- only comment
+;
+DROP TABLE t1;
+SET GLOBAL query_cache_size= default;
--- /dev/null
+++ b/mysql-test/r/percona_query_cache_with_comments_disable.result
@@ -0,0 +1,896 @@
+set GLOBAL query_cache_size=1355776;
+drop table if exists t1;
+create table t1 (a int not null);
+insert into t1 values (1),(2),(3);
+flush query cache;
+flush query cache;
+reset query cache;
+flush status;
+flush query cache;
+flush query cache;
+reset query cache;
+flush status;
+/* with comment first */select * from t1;
+a
+1
+2
+3
+-----------------------------------------------------
+/* with comment first */select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	0
+/* with comment first */select * from t1;
+a
+1
+2
+3
+/* with comment first */select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	2
+-----------------------------------------------------
+# with comment first
+select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	2
+# with comment first
+select * from t1;
+a
+1
+2
+3
+# with comment first
+select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	2
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	2
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	2
+-----------------------------------------------------
+-- with comment first
+select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	2
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	2
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	2
+-- with comment first
+select * from t1;
+a
+1
+2
+3
+-- with comment first
+select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	3
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	3
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	2
+-----------------------------------------------------
+/* with comment first and "quote" */select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	3
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	3
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	2
+/* with comment first and "quote" */select * from t1;
+a
+1
+2
+3
+/* with comment first and "quote" */select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	4
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	4
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	3
+-----------------------------------------------------
+# with comment first and "quote"
+select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	4
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	4
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	3
+# with comment first and "quote"
+select * from t1;
+a
+1
+2
+3
+# with comment first and "quote"
+select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	5
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	5
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	3
+-----------------------------------------------------
+-- with comment first and "quote" 
+select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	5
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	5
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	3
+-- with comment first and "quote" 
+select * from t1;
+a
+1
+2
+3
+-- with comment first and "quote" 
+select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	6
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	6
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	3
+-----------------------------------------------------
+/* with comment and whitespaces first */select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	6
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	6
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	3
+/* with comment and whitespaces first */select * from t1;
+a
+1
+2
+3
+/* with comment and whitespaces first */select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	7
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	7
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	4
+-----------------------------------------------------
+# with comment and whitespaces first
+select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	7
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	7
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	4
+# with comment and whitespaces first
+select * from t1;
+a
+1
+2
+3
+# with comment and whitespaces first
+select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	8
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	8
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	4
+-----------------------------------------------------
+-- with comment and whitespaces first
+select * from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	8
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	8
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	4
+-- with comment and whitespaces first
+select * from t1;
+a
+1
+2
+3
+-- with comment and whitespaces first
+select * from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	9
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	9
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	4
+-----------------------------------------------------
+select * /* internal comment */ from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	9
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	9
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	4
+select * /* internal comment */ from t1;
+a
+1
+2
+3
+select * /* internal comment */ from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	10
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	10
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	5
+-----------------------------------------------------
+select */* internal comment */ from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	10
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	10
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	5
+select */* internal comment */ from t1;
+a
+1
+2
+3
+select */* internal comment */ from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	11
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	11
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	6
+-----------------------------------------------------
+select */* internal comment */from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	11
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	11
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	6
+select */* internal comment */from t1;
+a
+1
+2
+3
+select */* internal comment */from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	12
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	12
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	7
+-----------------------------------------------------
+select * /* internal comment with "quote" */ from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	12
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	12
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	7
+select * /* internal comment with "quote" */ from t1;
+a
+1
+2
+3
+select * /* internal comment with "quote" */ from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	13
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	13
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	8
+-----------------------------------------------------
+select */* internal comment with "quote" */ from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	13
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	13
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	8
+select */* internal comment with "quote" */ from t1;
+a
+1
+2
+3
+select */* internal comment with "quote" */ from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	14
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	14
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	9
+-----------------------------------------------------
+select */* internal comment with "quote" */from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	14
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	14
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	9
+select */* internal comment with "quote" */from t1;
+a
+1
+2
+3
+select */* internal comment with "quote" */from t1;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	15
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	15
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	10
+-----------------------------------------------------
+select * from t1
+
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	15
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	15
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	10
+select * from t1
+;
+a
+1
+2
+3
+select * from t1
+;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	16
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	16
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	11
+-----------------------------------------------------
+select * from t1 
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	16
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	16
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	11
+select * from t1 ;
+a
+1
+2
+3
+select * from t1 ;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	16
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	16
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	13
+-----------------------------------------------------
+select * from t1	
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	16
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	16
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	13
+select * from t1	;
+a
+1
+2
+3
+select * from t1	;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	16
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	16
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	15
+-----------------------------------------------------
+select * from t1
+/* comment in the end */
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	16
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	16
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	15
+select * from t1
+/* comment in the end */;
+a
+1
+2
+3
+select * from t1
+/* comment in the end */;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	17
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	17
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	16
+-----------------------------------------------------
+select * from t1
+/* *\/ */
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	17
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	17
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	16
+select * from t1
+/* *\/ */;
+a
+1
+2
+3
+select * from t1
+/* *\/ */;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	18
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	18
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	17
+-----------------------------------------------------
+select * from t1
+/* comment in the end */
+
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	18
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	18
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	17
+select * from t1
+/* comment in the end */
+;
+a
+1
+2
+3
+select * from t1
+/* comment in the end */
+;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	18
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	18
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	19
+-----------------------------------------------------
+select * from t1 #comment in the end
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	18
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	18
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	19
+select * from t1 #comment in the end;
+a
+1
+2
+3
+select * from t1 #comment in the end;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	19
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	19
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	20
+-----------------------------------------------------
+select * from t1 #comment in the end
+
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	19
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	19
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	20
+select * from t1 #comment in the end
+;
+a
+1
+2
+3
+select * from t1 #comment in the end
+;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	19
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	19
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	22
+-----------------------------------------------------
+select * from t1 -- comment in the end
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	19
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	19
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	22
+select * from t1 -- comment in the end;
+a
+1
+2
+3
+select * from t1 -- comment in the end;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	20
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	20
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	23
+-----------------------------------------------------
+select * from t1 -- comment in the end
+
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	20
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	20
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	23
+select * from t1 -- comment in the end
+;
+a
+1
+2
+3
+select * from t1 -- comment in the end
+;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	20
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	20
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	25
+-----------------------------------------------------
+select ' \'  ' from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	20
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	20
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	25
+select ' \'  ' from t1;
+'  
+ '  
+ '  
+ '  
+select ' \'  ' from t1;
+'  
+ '  
+ '  
+ '  
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	21
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	21
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	26
+-----------------------------------------------------
+select ' \' /* comment inside quotes with internal backslash quote */' from t1
+-----------------------------------------------------
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	21
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	21
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	26
+select ' \' /* comment inside quotes with internal backslash quote */' from t1;
+' /* comment inside quotes with internal backslash quote */
+ ' /* comment inside quotes with internal backslash quote */
+ ' /* comment inside quotes with internal backslash quote */
+ ' /* comment inside quotes with internal backslash quote */
+select ' \' /* comment inside quotes with internal backslash quote */' from t1;
+' /* comment inside quotes with internal backslash quote */
+ ' /* comment inside quotes with internal backslash quote */
+ ' /* comment inside quotes with internal backslash quote */
+ ' /* comment inside quotes with internal backslash quote */
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	22
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	22
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	27
+DROP TABLE t1;
+SET GLOBAL query_cache_size=default;
+set global query_cache_strip_comments=OFF;
--- /dev/null
+++ b/mysql-test/r/percona_query_cache_with_comments_prepared_statements.result
@@ -0,0 +1,396 @@
+set GLOBAL query_cache_size=1355776;
+flush query cache;
+flush query cache;
+reset query cache;
+flush status;
+drop table if exists t1;
+create table t1 (a int not null);
+insert into t1 values (1),(2),(3);
+set global query_cache_strip_comments=ON;
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	0
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	0
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	0
+prepare stmt from '/* with comment */ select * from t1';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	0
+execute stmt;
+a
+1
+2
+3
+execute stmt;
+a
+1
+2
+3
+execute stmt;
+a
+1
+2
+3
+execute stmt;
+a
+1
+2
+3
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	5
+prepare stmt from 'select * from t1';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	6
+prepare stmt from 'select * /*internal comment*/from t1';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	7
+prepare stmt from 'select * /*internal comment*/ from t1';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	8
+prepare stmt from 'select * from t1 /* at the end */';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	9
+prepare stmt from 'select * from t1 /* with "quote" */';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	10
+prepare stmt from 'select * from t1 /* with \'quote\' */';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	11
+prepare stmt from 'select * from t1 # 123
+';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	12
+prepare stmt from 'select * from t1 # 123 with "quote"
+';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	13
+prepare stmt from 'select * from t1 # 123 with \'quote\'
+';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	14
+prepare stmt from 'select * from t1
+# 123
+';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	15
+prepare stmt from '#456
+select * from t1
+# 123
+';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	16
+prepare stmt from 'select * from t1 -- 123
+';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	17
+prepare stmt from 'select * from t1
+-- 123
+';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	18
+prepare stmt from '-- comment in first
+select * from t1
+# 123
+';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	1
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	1
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	19
+prepare stmt from '(#456(
+select * from t1
+# 123(
+)';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	2
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	2
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	19
+prepare stmt from '/*test*/(-- comment in first(
+select * from t1
+-- 123 asdasd
+/* test */)';
+execute stmt;
+a
+1
+2
+3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	2
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	2
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	20
+prepare stmt from 'select "test",a from t1';
+execute stmt;
+test	a
+test	1
+test	2
+test	3
+execute stmt;
+test	a
+test	1
+test	2
+test	3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	3
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	3
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	21
+prepare stmt from 'select "test /* internal \'comment\' */",a from t1';
+execute stmt;
+test /* internal 'comment' */	a
+test /* internal 'comment' */	1
+test /* internal 'comment' */	2
+test /* internal 'comment' */	3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	4
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	4
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	21
+prepare stmt from 'select "test #internal comment" ,a from t1';
+execute stmt;
+test #internal comment	a
+test #internal comment	1
+test #internal comment	2
+test #internal comment	3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	5
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	5
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	21
+prepare stmt from 'select "test #internal comment" #external comment
+,a from t1';
+execute stmt;
+test #internal comment	a
+test #internal comment	1
+test #internal comment	2
+test #internal comment	3
+show status like "Qcache_queries_in_cache";
+Variable_name	Value
+Qcache_queries_in_cache	5
+show status like "Qcache_inserts";
+Variable_name	Value
+Qcache_inserts	5
+show status like "Qcache_hits";
+Variable_name	Value
+Qcache_hits	22
+DROP TABLE t1;
+SET GLOBAL query_cache_size= default;
+set global query_cache_strip_comments=OFF;
--- /dev/null
+++ b/mysql-test/r/percona_status_wait_query_cache_mutex.result
@@ -0,0 +1,23 @@
+SET GLOBAL query_cache_size=1355776;
+flush query cache;
+flush query cache;
+reset query cache;
+flush status;
+DROP TABLE IF EXISTS t;
+CREATE TABLE t(id INT, number INT);
+INSERT INTO t VALUES (0,1);
+INSERT INTO t VALUES (1,2);
+INSERT INTO t VALUES (2,3);
+SET SESSION debug="+d,status_waiting_on_query_cache_mutex_sleep";
+SET DEBUG_SYNC='status_waiting_on_query_cache_mutex SIGNAL thread_ready';
+SELECT number from t where id > 0;
+SHOW PROCESSLIST;
+Id	User	Host	db	Command	Time	State	Info	Rows_sent	Rows_examined	Rows_read
+###	root	###	test	Query	###	NULL	SHOW PROCESSLIST	###	###	###
+###	root	###	test	Query	###	Waiting on query cache mutex	SELECT number from t where id > 0	###	###	###
+SELECT id, info, state FROM INFORMATION_SCHEMA.PROCESSLIST ORDER BY id;
+id	info	state
+###	SELECT id, info, state FROM INFORMATION_SCHEMA.PROCESSLIST ORDER BY id	executing
+###	SELECT number from t where id > 0	Waiting on query cache mutex
+DROP TABLE t;
+SET GLOBAL query_cache_size=0;
--- /dev/null
+++ b/mysql-test/t/percona_query_cache_with_comments.test
@@ -0,0 +1,5 @@
+--disable_ps_protocol
+set global query_cache_strip_comments=ON;
+-- source include/percona_query_cache_with_comments_begin.inc
+-- source include/percona_query_cache_with_comments.inc
+-- source include/percona_query_cache_with_comments_end.inc
--- /dev/null
+++ b/mysql-test/t/percona_query_cache_with_comments_crash.test
@@ -0,0 +1,22 @@
+-- source include/have_query_cache.inc
+set GLOBAL query_cache_size=1355776;
+--disable_warnings
+drop table if exists t1;
+--enable_warnings
+create table t1 (a int not null);
+insert into t1 values (1),(2),(3);
+flush query cache; # This crashed in some versions
+flush query cache; # This crashed in some versions
+reset query cache;
+flush status;
+( select * from t1 );
+/*!40101 SET @OLD_SQL_MODE := @@SQL_MODE, @@SQL_MODE := REPLACE(REPLACE(@@SQL_MODE, 'ANSI_QUOTES', ''), ',,', ','), @OLD_QUOTE := @@SQL_QUOTE_SHOW_CREATE, @@SQL_QUOTE_SHOW_CREATE := 1 */;
+/* only comment */;
+let query=# only comment
+;
+eval $query;
+let query=-- only comment
+;
+eval $query;
+DROP TABLE t1;
+SET GLOBAL query_cache_size= default;
--- /dev/null
+++ b/mysql-test/t/percona_query_cache_with_comments_disable.test
@@ -0,0 +1,3 @@
+-- source include/percona_query_cache_with_comments_begin.inc
+-- source include/percona_query_cache_with_comments.inc
+-- source include/percona_query_cache_with_comments_end.inc
--- /dev/null
+++ b/mysql-test/t/percona_query_cache_with_comments_prepared_statements.test
@@ -0,0 +1,208 @@
+-- source include/have_query_cache.inc
+
+set GLOBAL query_cache_size=1355776;
+
+# Reset query cache variables.
+flush query cache; # This crashed in some versions
+flush query cache; # This crashed in some versions
+reset query cache;
+flush status;
+--disable_warnings
+drop table if exists t1;
+--enable_warnings
+
+#
+# First simple test
+#
+
+create table t1 (a int not null);
+insert into t1 values (1),(2),(3);
+
+set global query_cache_strip_comments=ON;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from '/* with comment */ select * from t1';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+execute stmt;
+execute stmt;
+execute stmt;
+execute stmt;
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select * from t1';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select * /*internal comment*/from t1';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select * /*internal comment*/ from t1';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select * from t1 /* at the end */';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select * from t1 /* with "quote" */';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select * from t1 /* with \'quote\' */';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select * from t1 # 123
+';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select * from t1 # 123 with "quote"
+';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select * from t1 # 123 with \'quote\'
+';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select * from t1
+# 123
+';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from '#456
+select * from t1
+# 123
+';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select * from t1 -- 123
+';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select * from t1
+-- 123
+';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from '-- comment in first
+select * from t1
+# 123
+';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from '(#456(
+select * from t1
+# 123(
+)';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from '/*test*/(-- comment in first(
+select * from t1
+-- 123 asdasd
+/* test */)';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select "test",a from t1';
+execute stmt;
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select "test /* internal \'comment\' */",a from t1';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select "test #internal comment" ,a from t1';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+prepare stmt from 'select "test #internal comment" #external comment
+,a from t1';
+execute stmt;
+
+show status like "Qcache_queries_in_cache";
+show status like "Qcache_inserts";
+show status like "Qcache_hits";
+
+DROP TABLE t1;
+SET GLOBAL query_cache_size= default;
+set global query_cache_strip_comments=OFF;
--- /dev/null
+++ b/mysql-test/t/percona_status_wait_query_cache_mutex.test
@@ -0,0 +1,31 @@
+--source include/have_query_cache.inc
+--source include/have_debug.inc
+--source include/have_debug_sync.inc
+SET GLOBAL query_cache_size=1355776;
+--source include/percona_query_cache_with_comments_clear.inc
+
+-- disable_warnings
+DROP TABLE IF EXISTS t;
+-- enable_warnings
+CREATE TABLE t(id INT, number INT);
+INSERT INTO t VALUES (0,1);
+INSERT INTO t VALUES (1,2);
+INSERT INTO t VALUES (2,3);
+
+--connect (conn,localhost,root,,)
+
+--connection conn
+SET SESSION debug="+d,status_waiting_on_query_cache_mutex_sleep";
+SET DEBUG_SYNC='status_waiting_on_query_cache_mutex SIGNAL thread_ready';
+SEND SELECT number from t where id > 0;
+
+--connection default
+--replace_column 1 ### 3 ### 6 ### 9 ### 10 ### 11 ###
+SHOW PROCESSLIST;
+
+--replace_column 1 ###
+SELECT id, info, state FROM INFORMATION_SCHEMA.PROCESSLIST ORDER BY id;
+
+--disconnect conn
+DROP TABLE t;
+SET GLOBAL query_cache_size=0;
--- a/mysql-test/r/mysqld--help-notwin.result
+++ b/mysql-test/r/mysqld--help-notwin.result
@@ -491,6 +491,10 @@
  The minimum size for blocks allocated by the query cache
  --query-cache-size=# 
  The memory allocated to store results from old queries
+ --query-cache-strip-comments 
+ Enable and disable optimisation "strip comment for query
+ cache" - optimisation strip all comments from query while
+ search query result in query cache
  --query-cache-type=name 
  OFF = Don't cache or retrieve results. ON = Cache all
  results except SELECT SQL_NO_CACHE ... queries. DEMAND =
@@ -928,6 +932,7 @@
 query-cache-limit 1048576
 query-cache-min-res-unit 4096
 query-cache-size 0
+query-cache-strip-comments FALSE
 query-cache-type ON
 query-cache-wlock-invalidate FALSE
 query-prealloc-size 8192
--- /dev/null
+++ b/mysql-test/t/percona_query_cache_with_comments_crash_2-master.opt
@@ -0,0 +1 @@
+--query-cache-size=10M --query-cache-strip-comments
--- /dev/null
+++ b/mysql-test/t/percona_query_cache_with_comments_crash_2.test
@@ -0,0 +1,9 @@
+--disable_warnings
+DROP TABLE IF EXISTS table17_int;
+DROP TABLE IF EXISTS table30_int;
+--enable_warnings
+CREATE TABLE `table17_int` (pk integer auto_increment primary key, `col_char_10_not_null_key` char(10), `col_enum_not_null_key` int);
+CREATE TABLE `table30_int` (pk integer auto_increment primary key, `col_enum_not_null_key` int);
+SELECT X . `pk` FROM `table17_int` AS X LEFT JOIN `table30_int` AS Y USING ( `col_enum_not_null_key` ) WHERE X . `col_char_10_not_null_key` != '   you need to translate Views labels into other languages, consider installing the <a href=\" !path\">Internationalization</a> package\'s Views translation module.' LIMIT 7  /*Generated by THREAD_ID 1*/;
+DROP TABLE table17_int;
+DROP TABLE table30_int;
--- /dev/null
+++ b/mysql-test/r/percona_query_cache_with_comments_crash_2.result
@@ -0,0 +1,8 @@
+DROP TABLE IF EXISTS table17_int;
+DROP TABLE IF EXISTS table30_int;
+CREATE TABLE `table17_int` (pk integer auto_increment primary key, `col_char_10_not_null_key` char(10), `col_enum_not_null_key` int);
+CREATE TABLE `table30_int` (pk integer auto_increment primary key, `col_enum_not_null_key` int);
+SELECT X . `pk` FROM `table17_int` AS X LEFT JOIN `table30_int` AS Y USING ( `col_enum_not_null_key` ) WHERE X . `col_char_10_not_null_key` != '   you need to translate Views labels into other languages, consider installing the <a href=\" !path\">Internationalization</a> package\'s Views translation module.' LIMIT 7  /*Generated by THREAD_ID 1*/;
+pk
+DROP TABLE table17_int;
+DROP TABLE table30_int;
--- a/sql/sql_class.cc
+++ b/sql/sql_class.cc
@@ -791,6 +791,84 @@
           sql_errno == ER_TRG_NO_DEFINER);
 }
 
+#ifdef HAVE_QUERY_CACHE
+Query_Without_Comments::Query_Without_Comments() :
+  buffer(0),
+  q_length(0),
+  b_length(0)
+{
+}
+Query_Without_Comments::~Query_Without_Comments()
+{
+  if(buffer)
+  {
+    my_free(buffer);
+  }
+}
+bool Query_Without_Comments::allocate(size_t query_length, size_t db_length)
+{
+  DBUG_ENTER("Query_Without_Comments::allocate");
+  DBUG_PRINT("info", ("old buffer: %p "
+                      "old query: '%-.4096s' "
+                      "old buffer length: %u "
+                      "old query length: %u",
+                      buffer,
+                      buffer,
+                      (uint) b_length,
+                      (uint) q_length));
+  /* save maximum query length for check in the set_length */
+  q_length= query_length;
+  /* according to sql_parse.cc memory allocation */
+  size_t new_b_length= (query_length + 1) + (db_length + 1) +
+    QUERY_CACHE_FLAGS_SIZE;
+  if (b_length < new_b_length)
+  {
+    b_length= new_b_length;
+    if (buffer)
+    {
+      buffer= (char*) my_realloc(buffer, b_length, MYF(0));
+    }
+    else
+    {
+      buffer= (char *) my_malloc(b_length, MYF(0));
+    }
+  }
+  buffer[0]= 0;
+  DBUG_PRINT("info", ("buffer: %p "
+                      "buffer length: %u "
+                      "query maximum length: %u",
+                      buffer,
+                      (uint) b_length,
+                      (uint) q_length));
+  DBUG_RETURN(buffer);
+}
+void Query_Without_Comments::set_length(size_t query_length)
+{
+  DBUG_ENTER("Query_Without_Comments::set_length");
+  DBUG_ASSERT(query_length <= q_length);
+  buffer[query_length]= 0;
+  DBUG_PRINT("info", ("buffer: %p "
+                      "query: '%-.4096s' "
+                      "buffer length: %u "
+                      "query maximum length: %u "
+                      "query length: %u",
+                      buffer,
+                      buffer,
+                      (uint) b_length,
+                      (uint) q_length,
+                      (uint) query_length));
+  q_length= query_length;
+  DBUG_VOID_RETURN;
+}
+char* Query_Without_Comments::query()
+{
+  return buffer;
+}
+size_t Query_Without_Comments::length()
+{
+  return q_length;
+}
+#endif // HAVE_QUERY_CACHE
 
 THD::THD()
    :Statement(&main_lex, &main_mem_root, STMT_CONVENTIONAL_EXECUTION,
--- a/sql/sql_class.h
+++ b/sql/sql_class.h
@@ -1477,6 +1477,55 @@
 
 extern "C" void my_message_sql(uint error, const char *str, myf MyFlags);
 
+#ifdef HAVE_QUERY_CACHE
+/*
+  @class Query_Without_Comments
+  This class provides way for safety (re)allocation
+  a memory for a query without comments.
+*/
+class Query_Without_Comments
+{
+private:
+  /*
+    Denied copy and assigment for object of this class.
+  */
+  Query_Without_Comments(const Query_Without_Comments&);
+  Query_Without_Comments& operator=(const Query_Without_Comments&);
+public:
+  /*
+    Constructor is filling fields by zero (no allocation).
+  */
+  Query_Without_Comments();
+  /*
+    Destructor clean allocated memory
+  */
+  ~Query_Without_Comments();
+public:
+  /*
+    (Re)allocate memory for query. Query length after that is 0.
+  */
+  bool allocate(size_t query_length, size_t db_length);
+  /*
+    Set result query length, when query
+    without comments is copied to buffer.
+  */
+  void set_length(size_t query_length);
+public:
+  /*
+    Result query.
+  */
+  char*  query();
+  /*
+    Result query length
+  */
+  size_t length();
+private:
+  char* buffer;
+  size_t q_length;
+  size_t b_length;
+};
+#endif /* HAVE_QUERY_CACHE */
+
 /**
   @class THD
   For each client connection we create a separate thread with THD serving as
@@ -1534,6 +1583,7 @@
   struct st_mysql_stmt *current_stmt;
 #endif
 #ifdef HAVE_QUERY_CACHE
+  Query_Without_Comments query_without_comments;
   Query_cache_tls query_cache_tls;
 #endif
   NET	  net;				// client connection descriptor
