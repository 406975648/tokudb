diff -ruN innodb_plugin-1.0.6_orig/buf/buf0buf.c innodb_plugin-1.0.6_tmp/buf/buf0buf.c
--- innodb_plugin-1.0.6_orig/buf/buf0buf.c	2009-11-02 18:42:56.000000000 +0900
+++ innodb_plugin-1.0.6_tmp/buf/buf0buf.c	2009-12-04 10:34:10.000000000 +0900
@@ -3833,14 +3833,16 @@
 	buf_pool_mutex_enter();
 
 	fprintf(file,
-		"Buffer pool size   %lu\n"
-		"Free buffers       %lu\n"
-		"Database pages     %lu\n"
-		"Old database pages %lu\n"
-		"Modified db pages  %lu\n"
+		"Buffer pool size        %lu\n"
+		"Buffer pool size, bytes %lu\n"
+		"Free buffers            %lu\n"
+		"Database pages          %lu\n"
+		"Old database pages      %lu\n"
+		"Modified db pages       %lu\n"
 		"Pending reads %lu\n"
 		"Pending writes: LRU %lu, flush list %lu, single page %lu\n",
 		(ulong) buf_pool->curr_size,
+		(ulong) buf_pool->curr_size * UNIV_PAGE_SIZE,
 		(ulong) UT_LIST_GET_LEN(buf_pool->free),
 		(ulong) UT_LIST_GET_LEN(buf_pool->LRU),
 		(ulong) buf_pool->LRU_old_len,
diff -ruN innodb_plugin-1.0.6_orig/fil/fil0fil.c innodb_plugin-1.0.6_tmp/fil/fil0fil.c
--- innodb_plugin-1.0.6_orig/fil/fil0fil.c	2009-11-02 18:42:56.000000000 +0900
+++ innodb_plugin-1.0.6_tmp/fil/fil0fil.c	2009-12-04 10:34:10.000000000 +0900
@@ -4796,3 +4796,30 @@
 
 	fil_system = NULL;
 }
+
+/*************************************************************************
+Return local hash table informations. */
+
+ulint
+fil_system_hash_cells(void)
+/*=======================*/
+{
+       if (fil_system) {
+               return (fil_system->spaces->n_cells
+                       + fil_system->name_hash->n_cells);
+       } else {
+               return 0;
+       }
+}
+
+ulint
+fil_system_hash_nodes(void)
+/*=======================*/
+{
+       if (fil_system) {
+               return (UT_LIST_GET_LEN(fil_system->space_list)
+                       * (sizeof(fil_space_t) + MEM_BLOCK_HEADER_SIZE));
+       } else {
+               return 0;
+       }
+}
diff -ruN innodb_plugin-1.0.6_orig/handler/ha_innodb.cc innodb_plugin-1.0.6_tmp/handler/ha_innodb.cc
--- innodb_plugin-1.0.6_orig/handler/ha_innodb.cc	2009-12-04 10:33:31.000000000 +0900
+++ innodb_plugin-1.0.6_tmp/handler/ha_innodb.cc	2009-12-04 10:34:10.000000000 +0900
@@ -9994,6 +9994,16 @@
   "Force InnoDB to not use next-key locking, to use only row-level locking.",
   NULL, NULL, FALSE);
 
+static MYSQL_SYSVAR_ULONG(show_verbose_locks, srv_show_verbose_locks,
+  PLUGIN_VAR_OPCMDARG,
+  "Whether to show records locked in SHOW INNODB STATUS.",
+  NULL, NULL, 0, 0, 1, 0);
+
+static MYSQL_SYSVAR_ULONG(show_locks_held, srv_show_locks_held,
+  PLUGIN_VAR_RQCMDARG,
+  "Number of locks held to print for each InnoDB transaction in SHOW INNODB STATUS.",
+  NULL, NULL, 10, 0, 1000, 0);
+
 #ifdef UNIV_LOG_ARCHIVE
 static MYSQL_SYSVAR_STR(log_arch_dir, innobase_log_arch_dir,
   PLUGIN_VAR_RQCMDARG | PLUGIN_VAR_READONLY,
@@ -10176,7 +10186,7 @@
 
 static MYSQL_SYSVAR_STR(version, innodb_version_str,
   PLUGIN_VAR_NOCMDOPT | PLUGIN_VAR_READONLY,
-  "InnoDB version", NULL, NULL, INNODB_VERSION_STR);
+  "Percona-InnoDB-plugin version", NULL, NULL, INNODB_VERSION_STR);
 
 static MYSQL_SYSVAR_BOOL(use_sys_malloc, srv_use_sys_malloc,
   PLUGIN_VAR_NOCMDARG | PLUGIN_VAR_READONLY,
@@ -10247,6 +10257,8 @@
   MYSQL_SYSVAR(thread_concurrency),
   MYSQL_SYSVAR(thread_sleep_delay),
   MYSQL_SYSVAR(autoinc_lock_mode),
+  MYSQL_SYSVAR(show_verbose_locks),
+  MYSQL_SYSVAR(show_locks_held),
   MYSQL_SYSVAR(version),
   MYSQL_SYSVAR(use_sys_malloc),
   MYSQL_SYSVAR(change_buffering),
diff -ruN innodb_plugin-1.0.6_orig/handler/innodb_patch_info.h innodb_plugin-1.0.6_tmp/handler/innodb_patch_info.h
--- innodb_plugin-1.0.6_orig/handler/innodb_patch_info.h	2009-12-04 10:33:31.000000000 +0900
+++ innodb_plugin-1.0.6_tmp/handler/innodb_patch_info.h	2009-12-04 10:34:10.000000000 +0900
@@ -24,5 +24,6 @@
        const char *link;
 }innodb_enhancements[] = {
 {"xtradb_show_enhancements","I_S.XTRADB_ENHANCEMENTS","","http://www.percona.com/docs/wiki/percona-xtradb"},
+{"innodb_show_status","Improvements to SHOW INNODB STATUS","Memory information and lock info fixes","http://www.percona.com/docs/wiki/percona-xtradb"},
 {NULL, NULL, NULL, NULL}
 };
diff -ruN innodb_plugin-1.0.6_orig/include/fil0fil.h innodb_plugin-1.0.6_tmp/include/fil0fil.h
--- innodb_plugin-1.0.6_orig/include/fil0fil.h	2009-11-02 18:42:56.000000000 +0900
+++ innodb_plugin-1.0.6_tmp/include/fil0fil.h	2009-12-04 10:34:10.000000000 +0900
@@ -717,6 +717,16 @@
 /*==============*/
 	const byte*	page);	/*!< in: file page */
 
+/*************************************************************************
+Return local hash table informations. */
+
+ulint
+fil_system_hash_cells(void);
+/*========================*/
+
+ulint
+fil_system_hash_nodes(void);
+/*========================*/
 
 typedef	struct fil_space_struct	fil_space_t;
 
diff -ruN innodb_plugin-1.0.6_orig/include/srv0srv.h innodb_plugin-1.0.6_tmp/include/srv0srv.h
--- innodb_plugin-1.0.6_orig/include/srv0srv.h	2009-11-02 18:42:56.000000000 +0900
+++ innodb_plugin-1.0.6_tmp/include/srv0srv.h	2009-12-04 10:34:10.000000000 +0900
@@ -146,6 +146,9 @@
 extern char	srv_adaptive_flushing;
 
 
+extern ulint    srv_show_locks_held;
+extern ulint    srv_show_verbose_locks;
+
 /* The sort order table of the MySQL latin1_swedish_ci character set
 collation */
 extern const byte*	srv_latin1_ordering;
diff -ruN innodb_plugin-1.0.6_orig/include/thr0loc.h innodb_plugin-1.0.6_tmp/include/thr0loc.h
--- innodb_plugin-1.0.6_orig/include/thr0loc.h	2009-11-02 18:42:56.000000000 +0900
+++ innodb_plugin-1.0.6_tmp/include/thr0loc.h	2009-12-04 10:34:10.000000000 +0900
@@ -83,6 +83,17 @@
 thr_local_get_in_ibuf_field(void);
 /*=============================*/
 
+/*************************************************************************
+Return local hash table informations. */
+
+ulint
+thr_local_hash_cells(void);
+/*=======================*/
+
+ulint
+thr_local_hash_nodes(void);
+/*=======================*/
+
 #ifndef UNIV_NONINL
 #include "thr0loc.ic"
 #endif
diff -ruN innodb_plugin-1.0.6_orig/include/univ.i innodb_plugin-1.0.6_tmp/include/univ.i
--- innodb_plugin-1.0.6_orig/include/univ.i	2009-11-19 16:24:45.000000000 +0900
+++ innodb_plugin-1.0.6_tmp/include/univ.i	2009-12-04 10:37:26.000000000 +0900
@@ -48,6 +48,11 @@
 #define INNODB_VERSION_MINOR	0
 #define INNODB_VERSION_BUGFIX	6
 
+#ifndef PERCONA_INNODB_VERSION
+#define PERCONA_INNODB_VERSION unknown
+#endif
+
+
 /* The following is the InnoDB version as shown in
 SELECT plugin_version FROM information_schema.plugins;
 calculated in make_version_string() in sql/sql_show.cc like this:
@@ -58,13 +63,15 @@
 	(INNODB_VERSION_MAJOR << 8 | INNODB_VERSION_MINOR)
 
 /* auxiliary macros to help creating the version as string */
-#define __INNODB_VERSION(a, b, c)	(#a "." #b "." #c)
-#define _INNODB_VERSION(a, b, c)	__INNODB_VERSION(a, b, c)
+#define __INNODB_VERSION(a, b, c, d)   (#a "." #b "." #c "-" #d)
+#define _INNODB_VERSION(a, b, c, d)    __INNODB_VERSION(a, b, c, d)
+
 
 #define INNODB_VERSION_STR			\
 	_INNODB_VERSION(INNODB_VERSION_MAJOR,	\
 			INNODB_VERSION_MINOR,	\
-			INNODB_VERSION_BUGFIX)
+			INNODB_VERSION_BUGFIX,  \
+			PERCONA_INNODB_VERSION)
 
 #define REFMAN "http://dev.mysql.com/doc/refman/5.1/en/"
 
diff -ruN innodb_plugin-1.0.6_orig/lock/lock0lock.c innodb_plugin-1.0.6_tmp/lock/lock0lock.c
--- innodb_plugin-1.0.6_orig/lock/lock0lock.c	2009-11-02 18:42:56.000000000 +0900
+++ innodb_plugin-1.0.6_tmp/lock/lock0lock.c	2009-12-04 10:34:10.000000000 +0900
@@ -4247,32 +4247,32 @@
 
 	putc('\n', file);
 
-	block = buf_page_try_get(space, page_no, &mtr);
-
-	if (block) {
-		for (i = 0; i < lock_rec_get_n_bits(lock); i++) {
-
-			if (lock_rec_get_nth_bit(lock, i)) {
-
-				const rec_t*	rec
-					= page_find_rec_with_heap_no(
-						buf_block_get_frame(block), i);
-				offsets = rec_get_offsets(
-					rec, lock->index, offsets,
-					ULINT_UNDEFINED, &heap);
-
-				fprintf(file, "Record lock, heap no %lu ",
-					(ulong) i);
-				rec_print_new(file, rec, offsets);
-				putc('\n', file);
+	if ( srv_show_verbose_locks ) {
+		block = buf_page_try_get(space, page_no, &mtr);
+		if (block) {
+			for (i = 0; i < lock_rec_get_n_bits(lock); i++) {
+
+				if (lock_rec_get_nth_bit(lock, i)) {
+
+					const rec_t*	rec
+						= page_find_rec_with_heap_no(
+								buf_block_get_frame(block), i);
+					offsets = rec_get_offsets(
+							rec, lock->index, offsets,
+							ULINT_UNDEFINED, &heap);
+
+					fprintf(file, "Record lock, heap no %lu ",
+							(ulong) i);
+					rec_print_new(file, rec, offsets);
+					putc('\n', file);
+				}
+			}
+		} else {
+			for (i = 0; i < lock_rec_get_n_bits(lock); i++) {
+				fprintf(file, "Record lock, heap no %lu\n", (ulong) i);
 			}
-		}
-	} else {
-		for (i = 0; i < lock_rec_get_n_bits(lock); i++) {
-			fprintf(file, "Record lock, heap no %lu\n", (ulong) i);
 		}
 	}
-
 	mtr_commit(&mtr);
 	if (UNIV_LIKELY_NULL(heap)) {
 		mem_heap_free(heap);
@@ -4450,7 +4450,7 @@
 		}
 	}
 
-	if (!srv_print_innodb_lock_monitor) {
+        if (!srv_print_innodb_lock_monitor && !srv_show_locks_held) {
 		nth_trx++;
 		goto loop;
 	}
@@ -4524,8 +4524,8 @@
 
 	nth_lock++;
 
-	if (nth_lock >= 10) {
-		fputs("10 LOCKS PRINTED FOR THIS TRX:"
+	if (nth_lock >= srv_show_locks_held) {
+		fputs("TOO LOCKS PRINTED FOR THIS TRX:"
 		      " SUPPRESSING FURTHER PRINTS\n",
 		      file);
 
diff -ruN innodb_plugin-1.0.6_orig/srv/srv0srv.c innodb_plugin-1.0.6_tmp/srv/srv0srv.c
--- innodb_plugin-1.0.6_orig/srv/srv0srv.c	2009-11-02 18:42:56.000000000 +0900
+++ innodb_plugin-1.0.6_tmp/srv/srv0srv.c	2009-12-04 10:34:10.000000000 +0900
@@ -188,6 +188,10 @@
 the checkpoints. */
 UNIV_INTERN char	srv_adaptive_flushing	= TRUE;
 
+UNIV_INTERN ulint  srv_show_locks_held     = 10;
+UNIV_INTERN ulint  srv_show_verbose_locks  = 0;
+
+
 /* The sort order table of the MySQL latin1_swedish_ci character set
 collation */
 UNIV_INTERN const byte*	srv_latin1_ordering;
@@ -1698,6 +1702,14 @@
 	time_t	current_time;
 	ulint	n_reserved;
 
+	ulint	btr_search_sys_subtotal;
+	ulint	lock_sys_subtotal;
+	ulint	recv_sys_subtotal;
+	ulint	io_counter_subtotal;
+
+	ulint	i;
+	trx_t*	trx;
+
 	mutex_enter(&srv_innodb_monitor_mutex);
 
 	current_time = time(NULL);
@@ -1746,24 +1758,6 @@
 
 	mutex_exit(&dict_foreign_err_mutex);
 
-	lock_print_info_summary(file);
-	if (trx_start) {
-		long	t = ftell(file);
-		if (t < 0) {
-			*trx_start = ULINT_UNDEFINED;
-		} else {
-			*trx_start = (ulint) t;
-		}
-	}
-	lock_print_info_all_transactions(file);
-	if (trx_end) {
-		long	t = ftell(file);
-		if (t < 0) {
-			*trx_end = ULINT_UNDEFINED;
-		} else {
-			*trx_end = (ulint) t;
-		}
-	}
 	fputs("--------\n"
 	      "FILE I/O\n"
 	      "--------\n", file);
@@ -1794,10 +1788,84 @@
 	      "BUFFER POOL AND MEMORY\n"
 	      "----------------------\n", file);
 	fprintf(file,
-		"Total memory allocated " ULINTPF
-		"; in additional pool allocated " ULINTPF "\n",
-		ut_total_allocated_memory,
-		mem_pool_get_reserved(mem_comm_pool));
+			"Total memory allocated " ULINTPF
+			"; in additional pool allocated " ULINTPF "\n",
+			ut_total_allocated_memory,
+			mem_pool_get_reserved(mem_comm_pool));
+	/* Calcurate reserved memories */
+	if (btr_search_sys && btr_search_sys->hash_index->heap) {
+		btr_search_sys_subtotal = mem_heap_get_size(btr_search_sys->hash_index->heap);
+	} else {
+		btr_search_sys_subtotal = 0;
+		for (i=0; i < btr_search_sys->hash_index->n_mutexes; i++) {
+			btr_search_sys_subtotal += mem_heap_get_size(btr_search_sys->hash_index->heaps[i]);
+		}
+	}
+
+	lock_sys_subtotal = 0;
+	if (trx_sys) {
+		mutex_enter(&kernel_mutex);
+		trx = UT_LIST_GET_FIRST(trx_sys->mysql_trx_list);
+		while (trx) {
+			lock_sys_subtotal += ((trx->lock_heap) ? mem_heap_get_size(trx->lock_heap) : 0);
+			trx = UT_LIST_GET_NEXT(mysql_trx_list, trx);
+		}
+		mutex_exit(&kernel_mutex);
+	}
+
+	recv_sys_subtotal = ((recv_sys && recv_sys->addr_hash)
+			? mem_heap_get_size(recv_sys->heap) : 0);
+
+	fprintf(file,
+			"Internal hash tables (constant factor + variable factor)\n"
+			"    Adaptive hash index %lu \t(%lu + %lu)\n"
+			"    Page hash           %lu\n"
+			"    Dictionary cache    %lu \t(%lu + %lu)\n"
+			"    File system         %lu \t(%lu + %lu)\n"
+			"    Lock system         %lu \t(%lu + %lu)\n"
+			"    Recovery system     %lu \t(%lu + %lu)\n"
+			"    Threads             %lu \t(%lu + %lu)\n",
+
+			(ulong) (btr_search_sys
+				? (btr_search_sys->hash_index->n_cells * sizeof(hash_cell_t)) : 0)
+			+ btr_search_sys_subtotal,
+			(ulong) (btr_search_sys
+				? (btr_search_sys->hash_index->n_cells * sizeof(hash_cell_t)) : 0),
+			(ulong) btr_search_sys_subtotal,
+
+			(ulong) (buf_pool->page_hash->n_cells * sizeof(hash_cell_t)),
+
+			(ulong) (dict_sys ? ((dict_sys->table_hash->n_cells
+						+ dict_sys->table_id_hash->n_cells
+						) * sizeof(hash_cell_t)
+					+ dict_sys->size) : 0),
+			(ulong) (dict_sys ? ((dict_sys->table_hash->n_cells
+							+ dict_sys->table_id_hash->n_cells
+							) * sizeof(hash_cell_t)) : 0),
+			(ulong) (dict_sys ? (dict_sys->size) : 0),
+
+			(ulong) (fil_system_hash_cells() * sizeof(hash_cell_t)
+					+ fil_system_hash_nodes()),
+			(ulong) (fil_system_hash_cells() * sizeof(hash_cell_t)),
+			(ulong) fil_system_hash_nodes(),
+
+			(ulong) ((lock_sys ? (lock_sys->rec_hash->n_cells * sizeof(hash_cell_t)) : 0)
+					+ lock_sys_subtotal),
+			(ulong) (lock_sys ? (lock_sys->rec_hash->n_cells * sizeof(hash_cell_t)) : 0),
+			(ulong) lock_sys_subtotal,
+
+			(ulong) (((recv_sys && recv_sys->addr_hash)
+						? (recv_sys->addr_hash->n_cells * sizeof(hash_cell_t)) : 0)
+					+ recv_sys_subtotal),
+			(ulong) ((recv_sys && recv_sys->addr_hash)
+					? (recv_sys->addr_hash->n_cells * sizeof(hash_cell_t)) : 0),
+			(ulong) recv_sys_subtotal,
+
+			(ulong) (thr_local_hash_cells() * sizeof(hash_cell_t)
+					+ thr_local_hash_nodes()),
+			(ulong) (thr_local_hash_cells() * sizeof(hash_cell_t)),
+			(ulong) thr_local_hash_nodes());
+
 	fprintf(file, "Dictionary memory allocated " ULINTPF "\n",
 		dict_sys->size);
 
@@ -1856,6 +1924,25 @@
 	srv_n_rows_deleted_old = srv_n_rows_deleted;
 	srv_n_rows_read_old = srv_n_rows_read;
 
+	lock_print_info_summary(file);
+	if (trx_start) {
+		long	t = ftell(file);
+		if (t < 0) {
+			*trx_start = ULINT_UNDEFINED;
+		} else {
+			*trx_start = (ulint) t;
+		}
+	}
+	lock_print_info_all_transactions(file);
+	if (trx_end) {
+		long	t = ftell(file);
+		if (t < 0) {
+			*trx_end = ULINT_UNDEFINED;
+		} else {
+			*trx_end = (ulint) t;
+		}
+	}
+
 	fputs("----------------------------\n"
 	      "END OF INNODB MONITOR OUTPUT\n"
 	      "============================\n", file);
diff -ruN innodb_plugin-1.0.6_orig/sync/sync0arr.c innodb_plugin-1.0.6_tmp/sync/sync0arr.c
--- innodb_plugin-1.0.6_orig/sync/sync0arr.c	2009-11-02 18:42:56.000000000 +0900
+++ innodb_plugin-1.0.6_tmp/sync/sync0arr.c	2009-12-04 10:34:10.000000000 +0900
@@ -471,7 +471,7 @@
 
 	fprintf(file,
 		"--Thread %lu has waited at %s line %lu"
-		" for %.2f seconds the semaphore:\n",
+		" for %#.5g seconds the semaphore:\n",
 		(ulong) os_thread_pf(cell->thread), cell->file,
 		(ulong) cell->line,
 		difftime(time(NULL), cell->reservation_time));
diff -ruN innodb_plugin-1.0.6_orig/thr/thr0loc.c innodb_plugin-1.0.6_tmp/thr/thr0loc.c
--- innodb_plugin-1.0.6_orig/thr/thr0loc.c	2009-11-02 18:42:56.000000000 +0900
+++ innodb_plugin-1.0.6_tmp/thr/thr0loc.c	2009-12-04 10:34:10.000000000 +0900
@@ -49,6 +49,7 @@
 
 /** The hash table. The module is not yet initialized when it is NULL. */
 static hash_table_t*	thr_local_hash	= NULL;
+ulint		thr_local_hash_n_nodes = 0;
 
 /** Thread local data */
 typedef struct thr_local_struct thr_local_t;
@@ -197,6 +198,7 @@
 		    os_thread_pf(os_thread_get_curr_id()),
 		    local);
 
+	thr_local_hash_n_nodes++;
 	mutex_exit(&thr_local_mutex);
 }
 
@@ -224,6 +226,7 @@
 
 	HASH_DELETE(thr_local_t, hash, thr_local_hash,
 		    os_thread_pf(id), local);
+	thr_local_hash_n_nodes--;
 
 	mutex_exit(&thr_local_mutex);
 
@@ -277,3 +280,29 @@
 	hash_table_free(thr_local_hash);
 	thr_local_hash = NULL;
 }
+
+/*************************************************************************
+Return local hash table informations. */
+
+ulint
+thr_local_hash_cells(void)
+/*======================*/
+{
+	if (thr_local_hash) {
+		return (thr_local_hash->n_cells);
+	} else {
+		return 0;
+	}
+}
+
+ulint
+thr_local_hash_nodes(void)
+/*======================*/
+{
+	if (thr_local_hash) {
+		return (thr_local_hash_n_nodes
+			* (sizeof(thr_local_t) + MEM_BLOCK_HEADER_SIZE));
+	} else {
+		return 0;
+	}
+}
